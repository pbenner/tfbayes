#! /usr/bin/env python

# Copyright (C) 2011 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import ConfigParser
import getopt
import os
import math
import sys

from tfbayes           import alignio
from tfbayes           import fasta
from tfbayes           import config
from tfbayes           import phylotree
from tfbayes.alignment import find_record, alignment_t
from tfbayes.cluster   import *

# global options
# ------------------------------------------------------------------------------

sampler_config = {
    }

options = {
    'format'         : 'maf',
    'species'        : None,
    'phylotree'      : None,
    'revcomp'        : False,
    'skip-gaps'      : False,
    'threshold'      : 20.0,
    'load'           : None,
    'verbose'        : False,
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-scan [option]... SAMPLER_CONFIG CLUSTER_NUMBER SEQUENCES..."
    print
    print "Scan a set of fasta sequences or multiple alignments in maf format for"
    print "sequences that match a cluster."
    print
    print "    FASTA and MAF files can be scanned in different ways:"
    print "    1) If the option `species' is given then only the record of"
    print "       that species is scanned with the PWM of the cluster."
    print "    2) If a phylogenetic tree is given then the whole alignment"
    print "       is scanned by computing marginal likelihoods with cluster"
    print "       counts as hyperparameters of the Dirichlet distribution."
    print "    For MAF files either a reference species or a phylogenetic tree"
    print "    must be given. The threshold value must be selected accordingly."
    print
    print "Options:"
    print "       --format=STR               - format of the input file(s) (fasta or maf)"
    print "                                    [default: maf]"
    print "       --phylotree=FILE           - use the phylogenetic tree for scanning"
    print "       --skip-gaps                - skip gaps on the reference sequence"
    print "       --species=NAME             - use species as reference"
    print "   -r                             - scan for the reverse complement"
    print "       --load=FILE_NAME           - load cluster list from file"
    print "       --threshold=VALUE"
    print
    print "   -h, --help                     - print help"
    print "   -v, --verbose                  - be verbose"
    print

# scan sequences file
# ------------------------------------------------------------------------------

def scan_with_phylotree(counts, alignment):
    scores = alignment_t(alignment, options['phylotree']).scan(counts)
    length = len(counts[0])
    for idx, score in enumerate(scores):
        if score > options['threshold'] and not score == 0.0:
            yield (idx,idx+length,score)

def scan_fasta(cluster, fasta_file):
    parser = fasta.parser(fasta_file)
    hits   = 0
    while 1:
        description, sequence = parser.read_sequence()
        if not sequence:
            break
        for i, j, score in cluster.scan(sequence, options['threshold'], options['skip-gaps']):
            hits += 1
            if len(description) >= 3:
                print "(%15s,%12s,%05i,%9.5f): %s" % (description[0], description[2], i, score, sequence[i:j])
            else:
                print "(%30s,%05i,%9.5f): %s" % (description[0], i, score, sequence[i:j])
    return hits

def scan_alignment(cluster, alignment):
    """Scan the reference sequence in a multiple alignment (MAF) for instances of a pwm."""
    hits   = 0
    idx    = find_record(options['species'], alignment)
    if idx is None:
        return 0
    for i, j, score in cluster.scan(alignment[idx], options['threshold'], options['skip-gaps']):
        hits += 1
        print "%s - Score: %f, Position: (%d, %d)" % (alignment[:,i:j], score, i, j)
        print
    return hits

def scan_alignment_with_phylotree(cluster, alignment):
    """Scan an alignment for regions that match the counts by computing the marginal
    likelihood for each position given the counts as hyperparameters."""
    counts = cluster.posterior_counts()
    length = len(counts[0])
    hits   = 0
    for i, j, score in scan_with_phylotree(counts, alignment):
        hits += 1
        print "%s - Score: %f, Position: (%d, %d)" % (alignment[:,i:j], score, i, j)
        print
    return hits

# scan alignments (maf) or simple fasta sequences
# ------------------------------------------------------------------------------

def scan_maf_files(cluster, maf_files):
    hits = 0
    for maf_file in maf_files:
        print "Scanning `%s':" % maf_file
        alignment_list = alignio.parse(maf_file, 'maf')
        for alignment in alignment_list:
            if options['phylotree']:
                hits += scan_alignment_with_phylotree(cluster, alignment)
            else:
                hits += scan_alignment(cluster, alignment)
    print "Found %d sequences." % hits

def scan_fasta_files(cluster, fasta_files):
    hits = 0
    for fasta_file in fasta_files:
        print "Scanning `%s':" % fasta_file
        if options['phylotree']:
            alignment_list = alignio.parse(fasta_file, 'fasta')
            for alignment in alignment_list:
                hits += scan_alignment_with_phylotree(cluster, alignment)
        elif options['species']:
            alignment_list = alignio.parse(fasta_file, 'fasta')
            for alignment in alignment_list:
                hits += scan_alignment(cluster, alignment)
        else:
            hits += scan_fasta(cluster, fasta_file)
    print "Found %d sequences." % hits

def scan_sequences_files(cluster, sequences_files):
    if options['format'] == 'maf':
        scan_maf_files(cluster, sequences_files)
    elif options['format'] == 'fasta':
        scan_fasta_files(cluster, sequences_files)
    else:
        raise IOError("Unknown sequences format.")

# main
# ------------------------------------------------------------------------------

def main(sampler_config_file, cluster_number, sequences_files):
    results_config = {}
    config.parse_sampler_config(sampler_config_file, sampler_config)
    # parse results file
    results_config_file = sampler_config['save']
    config.parse_results_config(results_config_file, results_config)
    if options['load']:
        if options['verbose']:
            sys.stderr.write("Loading clusters from `%s'.\n" % options['load'])
        config_parser_load = ConfigParser.ConfigParser()
        config_parser_load.read(options['load'])
        cluster_list = fileio.load_cluster_list(config_parser_load, sampler_config)
    else:
        # parse sequences fasta file
        descriptions, sequences = fasta.parse_sequences(sampler_config['phylogenetic_data'])
        cluster_list = generate_cluster_list(sequences, sampler_config, results_config)
    cluster = find_cluster(cluster_list, cluster_number)
    if options['revcomp']:
        cluster = cluster.revcomp()
    scan_sequences_files(cluster, sequences_files)

# __main__
# ------------------------------------------------------------------------------

def __main__():
    global options
    try:
        longopts   = ["format=",
                      "load=",
                      "phylotree=",
                      "skip-gaps",
                      "species=",
                      "threshold=",
                      "help",
                      "verbose"]
        opts, tail = getopt.getopt(sys.argv[1:], "rvh", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o == "--phylotree":
            options['phylotree'] = phylotree.pt_parse_file(a)
        if o == "--format":
            options['format'] = a
        if o == "--skip-gaps":
            options['skip-gaps'] = True
        if o == "--species":
            options['species'] = a
        if o == "--threshold":
            options['threshold'] = float(a)
        if o == "-r":
            options['revcomp'] = True
        if o == "--load":
            options['load'] = a
    if len(tail) < 2:
        usage()
        return 1
    # if format is maf then we need to know the reference
    # species
    if options['format'] == 'maf' and options['phylotree'] is None and options['species'] is None:
        usage()
        return 1
    # call main
    sampler_config_file = tail[0]
    cluster_number      = int(tail[1])
    sequences_files     = tail[2:]
    main(sampler_config_file, cluster_number, sequences_files)
    # and free the phylotree
    if options['phylotree']:
        phylotree.pt_destroy(options['phylotree'])

if __name__ == "__main__":
    try:
        sys.exit(__main__())
    except IOError, e:
        sys.stderr.write('%s\n' % e)
        sys.exit(1)
