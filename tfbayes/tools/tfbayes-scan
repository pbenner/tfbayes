#! /usr/bin/env python

# Copyright (C) 2011 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import ConfigParser
import getopt
import os
import math
import sys

from Bio     import AlignIO

from tfbayes import fasta
from tfbayes import cluster
from tfbayes.phylotree import *

# global options
# ------------------------------------------------------------------------------

sampler_config = {
    }

options = {
    'format'         : 'maf',
    'species'        : None,
    'revcomp'        : False,
    'skip-gaps'      : False,
    'threshold'      : 20.0,
    'load'           : None,
    'verbose'        : False,
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-scan [option]... PWM SEQUENCES..."
    print
    print "Scan a set of fasta sequences or multiple alignments in maf format for"
    print "sequences that match the pwm. If fasta files are used, then all sequences"
    print "in the fasta files are scanned. For maf files, only the sequences of a"
    print "reference species is scanned. Use `tfbayes-export-cluster' to obtain the"
    print "PWM from a cluster."
    print
    print "Options:"
    print "       --format=STR               - format of the input file(s) (fasta or maf)"
    print "                                    [default: maf]"
    print "       --skip-gaps                - skip gaps on the reference sequence"
    print "       --species=NAME             - use species as reference (required for alignments)"
    print "   -r                             - scan for the reverse complement"
    print "       --load=FILE_NAME           - load motifs from file"
    print "       --threshold=VALUE"
    print
    print "   -h, --help                     - print help"
    print "   -v, --verbose                  - be verbose"
    print

# scan sequences file
# ------------------------------------------------------------------------------

def select_subsequence(sequence, i, length):
    if options['skip-gaps']:
        # skip all subsequences that start with a gap
        if sequence[i] == '-':
            return None
        result = ""
        for j in range(i, len(sequence)):
            if not sequence[j] == '-':
                result += sequence[j]
            if len(result) == length:
                break
        # the resulting subsequence might be shorter
        # than what we need!
        if not len(result) is length:
            return None
        else:
            return result, j
    else:
        return sequence[i:i+length], i+length

def scan(pwm, sequence):
    length = len(pwm[0])
    for i in range(len(sequence)-length):
        result = select_subsequence(sequence, i, length)
        if result:
            subsequence, j = result
            score = cluster.score(pwm, subsequence)
            if score > options['threshold']:
                yield (i,j,score)

def scan_fasta(pwm, fasta_file):
    print "Scanning `%s':" % fasta_file
    parser = fasta.parser(fasta_file)
    length = len(pwm[0])
    hits   = 0
    while 1:
        description, sequence = parser.read_sequence()
        if not sequence:
            break
        for i, j, score in scan(pwm, sequence):
            hits += 1
            if len(description) >= 3:
                print "(%15s,%12s,%05i,%8.5f): %s" % (description[0], description[2], i, score, sequence[i:j])
            else:
                print "(%30s,%05i,%8.5f): %s" % (description[0], i, score, sequence[i:j])
    return hits

def find_track(species, alignment):
    for idx, track in enumerate(alignment):
        if track.name == species:
            return idx
    sys.stderr.write('Warning, reference species not found.\n')
    return -1

def scan_alignment(pwm, alignment):
    length = len(pwm[0])
    hits   = 0
    idx    = find_track(options['species'], alignment)
    if idx is -1:
        return
    for i, j, score in scan(pwm, alignment[idx]):
        hits += 1
        print "%s - Score: %f, Position: (%d, %d)" % (alignment[:,i:j], score, i, j)
        print
    return hits

# scan alignments (maf) or simple fasta sequences
# ------------------------------------------------------------------------------

def scan_maf_files(pwm, maf_files):
    hits = 0
    for maf_file in maf_files:
        alignment_list = AlignIO.parse(maf_file, 'maf')
        for alignment in alignment_list:
            # test
            pt_root   = pt_parse_file('../drosophilae.nh')
            alignment = alignment_t(alignment, pt_root)
            # test
            hits += scan_alignment(pwm, alignment)
    print "Found %d sequences." % hits

def scan_fasta_files(pwm, fasta_files):
    hits = 0
    for fasta_file in fasta_files:
        hits += scan_fasta(pwm, fasta_file)
    print "Found %d sequences." % hits

def scan_sequences_files(pwm, sequences_files):
    if options['format'] == 'maf':
        scan_maf_files(pwm, sequences_files)
    elif options['format'] == 'fasta':
        scan_fasta_files(pwm, sequences_files)
    else:
        raise ValueError("Unknown sequences format.")

# main
# ------------------------------------------------------------------------------

def main(pwm_file, sequences_files):
    pwm = cluster.parse_pwm(pwm_file)
    if options['revcomp']:
        pwm = cluster.revcomp(pwm, len(pwm), len(pwm[0]))
    scan_sequences_files(pwm, sequences_files)

# __main__
# ------------------------------------------------------------------------------

def __main__():
    global options
    try:
        longopts   = ["format=", "load=", "skip-gaps", "species=", "threshold=", "help", "verbose"]
        opts, tail = getopt.getopt(sys.argv[1:], "r", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o == "--format":
            options['format'] = a
        if o == "--skip-gaps":
            options['skip-gaps'] = True
        if o == "--species":
            options['species'] = a
        if o == "--threshold":
            options['threshold'] = float(a)
        if o == "-r":
            options['revcomp'] = True
    if len(tail) < 2:
        usage()
        return 1
    # if format is maf then we need to know the reference
    # species
    if options['format'] is 'maf' and options['species'] is None:
        usage()
        return 1
    # call main
    pwm_file        = tail[0]
    sequences_files = tail[1:]
    main(pwm_file, sequences_files)

if __name__ == "__main__":
    sys.exit(__main__())
