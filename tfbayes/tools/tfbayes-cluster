#! /usr/bin/env python

# Copyright (C) 2011, 2012 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import ConfigParser
import getopt
import os
import sys

from Bio               import AlignIO

from tfbayes.fasta     import *
from tfbayes.config    import *
from tfbayes.cluster   import *

# global options
# ------------------------------------------------------------------------------

sampler_config = default_sampler_config()

options = {
    'load'           : None,
    'revcomp'        : False,
    'verbose'        : False,
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-cluster [option]... COMMAND SAMPLER_CONFIG CLUSTER_NUMBER"
    print
    print "Given a sampling result, export one of the clusters. The"
    print "output of this program can be used with `tfbayes-scan' to search"
    print "alignments of sequences for matches."
    print
    print "Commands:"
    print "   export-counts                  - export bare counts of a cluster"
    print "   export-pwm                     - export the pwm from a cluster"
    print
    print "Options:"
    print "   -r                             - export reverse complement"
    print
    print "   -h, --help                     - print help"
    print "   -v, --verbose                  - be verbose"
    print

# export cluster
# ------------------------------------------------------------------------------

def export_pwm(cluster):
    if options['revcomp']:
        print_pwm(cluster.revcomp().pwm())
    else:
        print_pwm(cluster.pwm())

def export_counts(cluster):
    if options['revcomp']:
        print_counts(cluster.revcomp().counts, cluster.revcomp().counts_gap)
    else:
        print_counts(cluster.counts, cluster.counts_gap)

# main
# ------------------------------------------------------------------------------

def main(command, sampler_config_file, cluster_number):
    results_config = {}
    parse_sampler_config(sampler_config_file, sampler_config)
    # parse results file
    results_config_file = sampler_config['save']
    parse_results_config(results_config_file, results_config)
    if options['load']:
        config_parser_load = ConfigParser.ConfigParser()
        config_parser_load.read(options['load'])
        cluster_list = fileio.load_cluster_list(config_parser_load, sampler_config)
    else:
        # parse sequences fasta file
        descriptions, sequences = parse_sequences(sampler_config['phylogenetic_data'])
        cluster_list = generate_cluster_list(sequences, sampler_config, results_config)
    cluster = find_cluster(cluster_list, cluster_number)
    if command == 'export-pwm':
        export_pwm(cluster)
    if command == 'export-counts':
        export_counts(cluster)

# __main__
# ------------------------------------------------------------------------------

def __main__():
    global options
    try:
        longopts   = ["help", "verbose"]
        opts, tail = getopt.getopt(sys.argv[1:], "r", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o == "-r":
            options['revcomp'] = True
    if not len(tail) is 3:
        usage()
        return 1
    # call main
    command             = tail[0]
    sampler_config_file = tail[1]
    cluster_number      = tail[2]
    main(command, sampler_config_file, int(cluster_number))

if __name__ == "__main__":
    sys.exit(__main__())
