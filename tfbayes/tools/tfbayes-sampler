#! /usr/bin/env python

# Copyright (C) 2011-2013 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# imports
# ------------------------------------------------------------------------------

import sys
import getopt
import os

# local imports
# ------------------------------------------------------------------------------

from tfbayes.config                 import *
from tfbayes.cluster                import parse_partition
from tfbayes.dpm.dpm_tfbs_interface import *

# global options
# ------------------------------------------------------------------------------

sampler_config = default_sampler_config()

options = {
    'resume'              : None,
    'verbose'             : False
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-sampler [option]... SAMPLER_CONFIG"
    print
    print "This program launches the sampler on ChIP data, which must be first"
    print "processed with `tfbayes-approximate'."
    print
    print "Options:"
    print "       --samples=SAMPLES[:BURN_IN] - number of samples [default: 1000:100]"
    print "       --population-size=INT       - number of parallel samplers [default: 1]"
    print
    print "   -s, --save=FILE                 - save posterior to FILE"
    print "       --resume=FILE               - initialize the sampler with the map partition"
    print "                                     of a previous sampling run"
    print
    print "   -h, --help                      - print help"
    print "   -v, --verbose                   - be verbose"
    print

# sample
# ------------------------------------------------------------------------------

def resume(config_file):
    results_config = {}
    parse_results_config(config_file, results_config)
    # TODO: it should be possible to resume from some other partition
    # (not only the map estimate)
    partition = parse_partition(results_config['map_partition'])
    return partition

def sample():
    samples = sampler_config['samples'][0]
    burnin  = sampler_config['samples'][1]
    if options['resume']:
        partition = resume(options['resume'])
        dpm_init(sampler_config,
                 sampler_config['phylogenetic_data'],
                 sampler_config['alignment_data'], partition)
    else:
        dpm_init(sampler_config,
                 sampler_config['phylogenetic_data'],
                 sampler_config['alignment_data'])
    dpm_sample(samples, burnin)
    dpm_save(sampler_config['save'])
    dpm_free()

# main
# ------------------------------------------------------------------------------

def main():
    global options
    global sampler_config
    try:
        longopts   = ["help",
                      "verbose",
                      "population-size=",
                      "resume=",
                      "save=",
                      "samples="]
        opts, tail = getopt.getopt(sys.argv[1:], "s:vh", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    if len(tail) != 1:
        usage()
        return 1
    # option default options from config file
    parse_sampler_config(tail[0], sampler_config)
    # override those options with command line arguments
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o == "--population-size":
            sampler_config['population_size'] = int(a)
        if o in ("-s", "--save"):
            sampler_config['save'] = a
        if o == "--resume":
            options['resume'] = a
        if o == "--samples":
            tmp = map(int, a.split(":"))
            if len(tmp) == 2:
                sampler_config["samples"] = tuple(tmp)
            elif len(tmp) == 1:
                sampler_config["samples"] = (tmp[0], 0)
            else:
                usage()
                return 1
    sample()
    return 0

if __name__ == "__main__":
    sys.exit(main())
