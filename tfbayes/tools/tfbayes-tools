#! /usr/bin/env python

# Copyright (C) 2011 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# imports
# ------------------------------------------------------------------------------

import re
import math
import time
import ConfigParser
import sys
import getopt
import os


import numpy               as     np
import numpy.random.mtrand as     mt
import numpy.random        as     rd

from tfbayes.fasta import fasta
from tfbayes.motif import fileio
from tfbayes.motif import information
from tfbayes.motif import tools
from tfbayes.motif import plot

from tfbayes.uipac.alphabet import DNA

# global options
# ------------------------------------------------------------------------------

options = {
    'verbose'     : False,
    }

getcounts_options = {
    'n'           : 100,
    'revcomp'     : False,
    }

revcomp_options = {
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-tools [option]... COMMAND CLUSTER_CONFIG"
    print
    print "Commands:"
    print "   getcounts [command option] CLUSTER_NAME"
    print "   revcomp   [command option] CLUSTER_NAME"
    print
    print "Options:"
    print "   -h, --help                     - print help"
    print "   -v, --verbose                  - be verbose"
    print
    print "getcounts:"
    print "   -n int                         - multiply frequencies by N [default: 100]"
    print "   -r                             - compute reverse complement"
    print
    print "revcomp:"
    print

# parse results config
# ------------------------------------------------------------------------------

def read_vector(config, section, option, converter):
    vector_str = config.get(section, option)
    vector     = map(converter, vector_str.split(' '))
    return vector

def read_matrix(config, section, option, converter):
    matrix_str = config.get(section, option)
    matrix     = []
    for line in matrix_str.split('\n'):
        if line != '':
            matrix.append([converter(a) for a in line.split(' ')])
    return matrix

def parse_config(config_file, cluster_name):
    config_parser = ConfigParser.ConfigParser()
    config_parser.read(config_file)
    return read_matrix(config_parser, 'Cluster', cluster_name, float)

# output
# ------------------------------------------------------------------------------

def print_matrix(matrix):
    print "\n".join(map(lambda arg: " ".join(map(str, arg)), matrix))

# commands
# ------------------------------------------------------------------------------

def getcounts(cluster_name, config_file):
    motif = parse_config(config_file, cluster_name)
    if getcounts_options['revcomp']:
        motif = tools.reverse_complement(motif)
    counts = [ [ int(round(motif[i][j]*getcounts_options['n'])) for j in range(0, len(motif[0])) ] for i in range(0, len(motif)) ]
    print_matrix(counts)

def revcomp(cluster_name, config_file):
    motif = parse_config(config_file, cluster_name)
    motif = tools.reverse_complement(motif)
    print_matrix(motif)

# main
# ------------------------------------------------------------------------------

def getcounts_main(args):
    global getcounts_options
    try:
        longopts   = []
        opts, tail = getopt.getopt(args[1:], "n:r", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    for o, a in opts:
        if o == "-n":
            getcounts_options['n'] = int(a)
        if o == "-r":
            getcounts_options['revcomp'] = True
    if len(tail) != 2:
        usage()
        return 1
    getcounts(*tail)

def revcomp_main(args):
    global revcomp_options
    try:
        longopts   = []
        opts, tail = getopt.getopt(args[1:], "", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    if len(tail) != 2:
        usage()
        return 1
    revcomp(*tail)

def main():
    global options
    try:
        longopts   = ["help", "verbose"]
        opts, tail = getopt.getopt(sys.argv[1:], "hv", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
    if len(tail) == 0:
        usage()
        return 1
    if tail[0] == "getcounts":
        getcounts_main(tail)
    if tail[0] == "revcomp":
        revcomp_main(tail)
    return 0

if __name__ == "__main__":
    sys.exit(main())
