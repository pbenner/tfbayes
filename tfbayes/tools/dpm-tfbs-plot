#! /usr/bin/env python

# Copyright (C) 2011 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# imports
# ------------------------------------------------------------------------------

import re
import math
import time
import ConfigParser
import sys
import getopt
import os

import numpy               as     np
import numpy.random.mtrand as     mt
import numpy.random        as     rd

from tfbayes.fasta import fasta

def importMatplotlib(backend=None):
    global pyplot
    global NonUniformImage
    global PdfPages
    global patches
    global path
    from matplotlib import use
    if backend:
        use(backend)
    import matplotlib.pyplot   as     pyplot
    from   matplotlib.image    import NonUniformImage
    from   matplotlib.backends.backend_pdf import PdfPages
    import matplotlib.patches  as     patches
    import matplotlib.path     as     path

# global options
# ------------------------------------------------------------------------------

options = {
    'save'        : None,
    'sequences'   : None,
    'interactive' : False,
    'verbose'     : False,
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "dpm-tfbs-plot [option]... RESULT [SEQUENCES]"
    print
    print "This program plots the log posterior and number of clusters of"
    print "a sampling run."
    print
    print "Options:"
    print "   -s, --save=FILE                - save plot to FILE"
    print
    print "   -h, --help                     - print help"
    print "   -v, --verbose                  - be verbose"
    print

# parse sequences file
# ------------------------------------------------------------------------------

def makefilter(keep):
    """ Return a functor that takes a string and returns a copy of that
        string consisting of only the characters in 'keep'.
    """
    import string

    # make a string of all chars, and one of all those NOT in 'keep'
    allchars = string.maketrans('', '')
    delchars = ''.join([c for c in allchars if c not in keep])

    # return the functor
    return lambda s,a=allchars,d=delchars: s.translate(a, d)

def readSequences(seq_file):
    parser = fasta.parser(seq_file)
    descriptions = []
    sequences    = []
    while 1:
        description, sequence = parser.read_sequence()
        if not sequence:
            break
        descriptions.append(description[0])
        sequences.append(sequence)
    return descriptions, sequences

# parse results config
# ------------------------------------------------------------------------------

def readVector(config, section, option, converter):
    vector_str = config.get(section, option)
    vector     = map(converter, vector_str.split(' '))
    return vector

def readMatrix(config, section, option, converter):
    matrix_str = config.get(section, option)
    matrix     = []
    for line in matrix_str.split('\n'):
        if line != '':
            matrix.append([converter(a) for a in line.split(' ')])
    return matrix

def normalize(matrix):
    m = max(map(max, matrix))
    return map(lambda l: map(lambda x: x/m, l), matrix)

def parseConfig(config_file):
    config_parser = ConfigParser.RawConfigParser()
    config_parser.read(config_file)

    posterior  = readMatrix(config_parser, 'Result', 'posterior',  float)
    posterior  = readMatrix(config_parser, 'Result', 'posterior',  float)
    components = readMatrix(config_parser, 'Result', 'components', int)

    return normalize(posterior), posterior, components

# plot
# ------------------------------------------------------------------------------

def plot_posterior(posterior, show):
    fig = pyplot.figure()
    fig.subplots_adjust(left=0.15)
    ax  = fig.add_subplot(111)
    ax.set_xlabel("sample")
    ax.set_ylabel("log posterior")
    for l in posterior:
        ax.plot(l)
    show()

def plot_components(components, show):
    fig = pyplot.figure()
    ax  = fig.add_subplot(111)
    ax.set_xlabel("sample")
    ax.set_ylabel("components")
    for c in components:
        ax.plot(c)
    show()

def plot_posterior_and_components(posterior, components, show):
    fig = pyplot.figure()
    fig.subplots_adjust(left=0.15)
    ax1 = fig.add_subplot(111)
    ax2 = ax1.twinx()
    ax1.set_xlabel("sample")
    ax1.set_ylabel("log posterior")
    ax2.set_ylabel("components")
    for l in posterior:
        p1 = ax1.plot(l, 'b')
    for c in components:
        p2 = ax2.plot(c, 'r')
    ax1.legend([p1, p2], ['log posterior', 'components'], ncol=2, mode='expand', loc=3, frameon=False, borderaxespad=0.)
    show()

def split_len(seq, length):
    return [seq[i:i+length] for i in range(0, len(seq), length)]

def plot_sequence(description, sequence, _posterior, n, show):
    sequences = split_len(sequence, 50)
    posterior = split_len(_posterior, 50)
    fig = pyplot.figure()
    ax  = fig.add_subplot(111, title=description)
    ax.set_frame_on(False)
    ax.set_axis_off()
    xn    = max(map(len, sequences))
    yn    = len(sequences)
    yfrom = 0.90
    yto   = yfrom-yn*0.04
    x, y = np.meshgrid(np.arange(0.01, 1.00,  0.99/xn),
                       np.arange(yfrom, yto, -(yfrom-yto)/len(sequences)))
    for sl, po, p1l, p2l in zip(sequences, posterior, x, y):
        for s, p, p1, p2 in zip(sl, po, p1l, p2l):
            ax.text(p1, p2, str(s), size=10, rotation=0,
                    ha="center", va="bottom", color=pyplot.cm.jet(p), weight='bold')
    show()

def plot_sequences(descriptions, sequences, posterior, show):
    for i in range(0, len(sequences)):
        plot_sequence(descriptions[i], sequences[i], posterior[i], i+1, show)

def plot_result(results_file):
    if options['save']:
        importMatplotlib('Agg')
        pp    = PdfPages(options['save'])
        show  = pp.savefig
        close = pp.close
    else:
        importMatplotlib()
        show  = pyplot.show
        close = None
    posterior, posterior, components = parseConfig(results_file)
    plot_posterior(posterior, show)
    plot_components(components, show)
#    plot_posterior_and_components(posterior, components, show)
    if options['sequences']:
        descriptions, sequences = readSequences(options['sequences'])
        plot_sequences(descriptions, sequences, posterior, show)
    if close:
        close()

# main
# ------------------------------------------------------------------------------

def main():
    global options
    try:
        longopts   = ["help", "verbose", "save="]
        opts, tail = getopt.getopt(sys.argv[1:], "s:", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o in ("-s", "--save"):
            options['save'] = a
    if len(tail) == 1:
        plot_result(tail[0])
    elif len(tail) == 2:
        options['sequences'] = tail[1]
        plot_result(tail[0])
    else:
        usage()
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main())
