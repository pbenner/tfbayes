#! /usr/bin/env python

# Copyright (C) 2014 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# imports
# ------------------------------------------------------------------------------

import getopt
import sys

from tfbayes                import alignio
from tfbayes.alignment      import alignment_t, marginal_likelihood, tree_prior, gamma_distribution_t
from tfbayes.interface      import vector
from tfbayes.phylotree      import pt_root_t
from tfbayes.uipac.alphabet import DNA

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-alignment-likelihood [option]... TREE ALIGNMENT"
    print
    print "Compute the marginal likelihood of an alignment given a phylogenetic"
    print "tree where the column specific stationary distribution is integrated"
    print "out."
    print
    print "Options:"
    print "       --alpha=Px:Px:Px:Px:Px[;...]   - dirichlet prior pseudocount vectors"
    print "       --format=str                   - format of the input file(s) (fasta or maf)"
    print "                                        [default: maf]"
    print "   -p                                 - compute (unnormalized) posterior"
    print "       --shape=float                  - shape parameter of the gamma prior"
    print "       --scale=float                  - scale parameter of the gamma prior"
    print "       --rate=float                   - rate parameter which scales the tree by a"
    print "                                        constant factor"
    print
    print "   -h, --help                         - print help"
    print "   -v, --verbose                      - be verbose"
    print

# options
# ------------------------------------------------------------------------------

options = {
    'format'         : 'maf',
    'alpha'          : [[0.2, 0.2, 0.2, 0.2, 0.2]],
    'posterior'      : False,
    'rate'           : 1.0,
    'shape'          : 1.0,
    'scale'          : 1.0,
    'verbose'        : False,
    }

# read alignments
# ------------------------------------------------------------------------------

def read_alignment(file_name):
    if options['verbose']:
        sys.stderr.write('Reading file %s.\n' % file_name)
    # use biopython to parse the alignment file
    if options['format'] == 'fasta':
        alignments = alignio.parse(file_name, "fasta")
    if options['format'] == 'maf':
        alignments = alignio.parse(file_name, "maf")
    return alignments

# compute marginal likelihood
# ------------------------------------------------------------------------------

def compute_marginal_likelihood(tree, alignments):
    result = 0.0
    for alignment in alignments:
        # convert to native alignment format
        alignment = alignment_t(alignment, tree)
        partial   = sum(marginal_likelihood(tree, alignment, options['alpha']))
        if (options['verbose']):
            print "partial likelihood: ", partial
        result   += partial
    if options['posterior']:
        gamma_distribution = gamma_distribution_t(
            options['shape'], options['scale'])
        result += tree_prior(tree, gamma_distribution)
    return result

# main
# ------------------------------------------------------------------------------

def main(tree_file, alignment_file):
    alignments = read_alignment(alignment_file)
    tree       = pt_root_t(tree_file)
    tree.scale(options['rate'])

    print compute_marginal_likelihood(tree, alignments)

# __main__
# ------------------------------------------------------------------------------

def __main__():
    global options
    try:
        longopts   = ["format=", "alpha=", "shape=", "scale=", "rate=",
                      "help", "verbose"]
        opts, tail = getopt.getopt(sys.argv[1:], "phv", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    if not len(tail) == 2:
        usage()
        return 1
    # override those options with command line arguments
    for o, a in opts:
        if o == "--format":
            options['format'] = a
        if o == "--alpha":
            options['alpha'] = []
            for v in a.split(';'):
                tmp = map(float, v.split(':'))
                if not len(tmp) == 5:
                    usage()
                    return 1
                options['alpha'].append(tmp)
        if o == "-p":
            options['posterior'] = True
        if o == "--shape":
            options['shape'] = float(a)
        if o == "--scale":
            options['scale'] = float(a)
        if o == "--rate":
            options['rate'] = float(a)
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
    main(*tail)
    return 0

if __name__ == "__main__":
    try:
        sys.exit(__main__())
    except IOError, e:
        sys.stderr.write('%s\n' % e)
        sys.exit(1)
