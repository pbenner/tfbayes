#! /usr/bin/env python

# Copyright (C) 2012-2014 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# imports
# ------------------------------------------------------------------------------

import sys
import getopt
import os
import subprocess

from tfbayes.alignment import *
from tfbayes.cluster   import *
from tfbayes.config    import *

# global options
# ------------------------------------------------------------------------------

sampler_config = default_sampler_config()
results_config = default_results_config()

options = {
    'verbose'          : False,
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-locate [option]... COMMAND SAMPLER_CONFIG"
    print
    print "Locate cluster elements and print the respective region"
    print "in the alignment"
    print
    print "Commands:"
    print "       map                        - use map partition"
    print "       mean                       - use mean partition"
    print "       median                     - use median parititon"
    print
    print "Options:"
    print "   -h, --help                     - print help"
    print "   -v, --verbose                  - be verbose"
    print

# parse alignment
# ------------------------------------------------------------------------------

def get_alignment(filename):
    alignment = alignment_set_t(filename)
    if len(alignment) == 0:
        raise IOError("Invalid alignment file")
    return alignment

# partition
# ------------------------------------------------------------------------------

def get_partition(command, results_config):
    key = '%s_partition' % command
    if not results_config.has_key(key) or not results_config[key]:
        raise IOError("Partition `%s' is not available in results file. Use `tfbayes-estimate' to compute it." % command)
    return results_config[key]

# print regions
# ------------------------------------------------------------------------------

def print_regions(partition, alignment):
    for idx, dpm_subset in enumerate(partition):
        print "Cluster %i with %i elements" % (idx, len(dpm_subset))
        print "--------------------------------------------------------------------------------"
        for r in dpm_subset:
            s = r.index()[0]
            p = r.index()[1]
            print "index (%d, %d)" % (s, p)
            print pretty_print_alignment(alignment[r])
            print

# main
# ------------------------------------------------------------------------------

def main(command, sampler_config_file):
    parse_sampler_config(sampler_config_file, sampler_config)
    # check if all required options are specified
    if not sampler_config.tfbs_length:
        raise IOError('tfbs length is unknown')
    if not sampler_config.save:
        raise IOError('no result file specified')
    if not sampler_config.alignment_file:
        raise IOError('no alignment file specified')
    # parse results file
    parse_results_config(sampler_config.save, results_config, False)
    # parse partition
    partition = get_partition(command, results_config)
    # parse alignment
    alignment = get_alignment(sampler_config.alignment_file)
    # print alignment regions
    print_regions(partition, alignment)

def __main__():
    global options
    global sampler_config
    try:
        longopts   = ["help", "verbose", ]
        opts, tail = getopt.getopt(sys.argv[1:], "hv", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    if len(tail) != 2:
        usage()
        return 1
    # override those options with command line arguments
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
    # call main and exit
    main(*tail)
    return 0

if __name__ == "__main__":
    try:
        sys.exit(__main__())
    except IOError, e:
        sys.stderr.write('%s\n' % e)
        sys.exit(1)
