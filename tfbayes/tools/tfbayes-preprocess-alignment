#! /usr/bin/env python

# Copyright (C) 2013 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# imports
# ------------------------------------------------------------------------------

import getopt
import re
import sys

from Bio                    import AlignIO

from tfbayes.uipac.alphabet import DNA

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-preprocess-alignment [option]... INPUT_FILE"
    print
    print "Given a multiple sequence alignment, this program preprocesses"
    print "the data, i.e. filters gaps."
    print
    print "Options:"
    print "       --format=STR       - format of the input file(s) (fasta or maf)"
    print "                            [default: maf]"
    print
    print "   -s SPECIES             - remove all columns that have no nucleotide"
    print "                            in this SPECIES"
    print
    print "   -h, --help             - print help"
    print "   -v, --verbose          - be verbose"
    print

# options
# ------------------------------------------------------------------------------

options = {
    'strip'          : None,
    'format'         : 'maf',
    'verbose'        : False,
    }

# main logic comes here
# ------------------------------------------------------------------------------

def remove_column(multiple_alignment, i):
    multiple_alignment = multiple_alignment[:,0:i]+multiple_alignment[:,i+1:]
    return multiple_alignment
#    for j in range(len(multiple_alignment)):
#        multiple_alignment[j] = multiple_alignment[j][0:i]+multiple_alignment[j][i+1:]

def strip_gaps_from_species(multiple_alignment):
    # index of the sequence from which to strip all dashes
    stripindex = None
    # search the multiple alignment for this index
    for i in range(len(multiple_alignment)):
        name = multiple_alignment[i].name.split(".")[0]
        if options['strip'] == name:
            stripindex = i
    if stripindex == None:
        sys.stderr.write("Species `%s' not found in the alignment.\n" % options['strip'])
        return multiple_alignment

    i = 0
    while i < len(multiple_alignment[0]):
        # filter all positions where the reference sequence has a gap
        while multiple_alignment[stripindex][i] == '-':
            multiple_alignment = remove_column(multiple_alignment, i)
        i = i + 1
        print i

    return multiple_alignment

# parse alignment
# ------------------------------------------------------------------------------

def get_alignment(file_name):
    # use biopython to parse the alignment file
    if options['format'] == 'maf':
        return AlignIO.parse(file_name, options['format'])
    else:
        return AlignIO.read(file_name, options['format'])


# main
# ------------------------------------------------------------------------------

def main(alignment):
    if options['strip']:
        alignment = strip_gaps_from_species(alignment)

    return alignment

def main_fasta(input_file):
    alignment = get_alignment(input_file)
    alignment = main(alignment)

    AlignIO.write(alignment, sys.stdout, "fasta")

def main_maf(input_file):
    alignment_list = get_alignment(input_file)
    result = []
    # maf files usually contain multiple alignment blocks
    for alignment in alignment_list:
        result.append(main(alignment))

    AlignIO.write(result, sys.stdout, "maf")

# main
# ------------------------------------------------------------------------------

def __main__():
    global options
    try:
        longopts   = ["format=", "help", "verbose"]
        opts, tail = getopt.getopt(sys.argv[1:], "s:hv", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    if len(tail) != 1:
        usage()
        return 1
    # override those options with command line arguments
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o == "--format":
            options['format'] = a
        if o == "-s":
            options['strip'] = a
            sys.stderr.write("Stripping all dashes from %s.\n" % a)
    # call main with files as argument
    if options['format'] == 'fasta':
        main_fasta(tail[0])
    elif options['format'] == 'maf':
        main_maf(tail[0])
    else:
        usage()
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(__main__())
