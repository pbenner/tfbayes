#! /usr/bin/env python

# Copyright (C) 2012-2013 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# imports
# ------------------------------------------------------------------------------

import getopt
import re
import sys

import Queue
import threading
import thread

from tfbayes                import alignio
from tfbayes.phylotree      import *
from tfbayes.uipac.alphabet import DNA

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-approximate [option]... PHYLOGENETIC_TREE INPUT_FILE..."
    print
    print "Given a set of alignments from the ChIP experiment, this"
    print "program computes an approximation of the phylogenetic tree"
    print "for each column of the multiple alignment. The result is"
    print "used as input for the sampler."
    print
    print "Options:"
    print "       --format=STR       - format of the input file(s) (fasta or maf)"
    print "                            [default: maf]"
    print
    print "   -t, --threads=N        - run N jobs in parallel"
    print
    print "   -h, --help             - print help"
    print "   -v, --verbose          - be verbose"
    print

# options
# ------------------------------------------------------------------------------

options = {
    'phylotree'      : None,
    'leafmap'        : None,
    'format'         : 'maf',
    'threads'        : 1,
    'verbose'        : False,
    }

# output the result in fasta format
# ------------------------------------------------------------------------------

def print_result(container):
    print '>%s' % os.path.basename(container['file_name'])
    for result in container['result']:
        for value in result:
            print '%11.8f' % value,
        print ";"

# main logic comes here
# ------------------------------------------------------------------------------

def alignment_approximate(multiple_alignment, phylotree):
    """For every column in the alignment, approximate the likelihood
    given by the phylogenetic tree by a simple multinomial
    distribution with averaged count statistics."""

    # convert alignment fron biopython object to native
    # alignment type
    alignment = alignment_t(multiple_alignment)

    return alignment.approximate(phylotree)

# parse alignment
# ------------------------------------------------------------------------------

def get_alignment(file_name):
    # use biopython to parse the alignment file
    if options['format'] == 'maf':
        return alignio.parse(file_name, options['format'])
    else:
        return alignio.read(file_name, options['format'])

# threading
# ------------------------------------------------------------------------------

class ComputationThread(threading.Thread):
    def __init__(self, queue_in, queue_out, mutex):
        threading.Thread.__init__(self)
        self.queue_in  = queue_in
        self.queue_out = queue_out
        self.mutex     = mutex
        self.phylotree = options['phylotree']
    def run(self):
        while True:
            job = self.queue_in.get()
            if options['verbose']:
                # to print a message we need to acquire the mutex
                # to messages to not appear scrambled
                self.mutex.acquire()
                print >> sys.stderr, 'Processing %s sequence %d.' % (job['file_name'], job['id'])
                self.mutex.release()
            # turn the alignment into an approximation
            result = alignment_approximate(job['alignment'], self.phylotree)
            if result:
                container = {
                    'result'       : result,
                    'file_name'    : job['file_name'],
                    'id'           : job['id'] }
                self.queue_out.put((job['id'], container))
            self.queue_in.task_done()

def launch_threads(jobs):
    mutex     = thread.allocate_lock()
    queue_in  = Queue.Queue()
    queue_out = Queue.PriorityQueue()
    threads   = []
    # launch daemon threads
    if not threads:
        for i in range(options['threads']):
            t = ComputationThread(queue_in, queue_out, mutex)
            t.setDaemon(True)
            t.start()
            threads += [t]
    # fill input queue
    for job in jobs:
        queue_in.put(job)
    queue_in.join()
    # process output
    while not queue_out.empty():
        container = queue_out.get()[1]
        print_result(container)

# go through the list of fasta files and package them nicely as jobs
# ------------------------------------------------------------------------------

def main_fasta(files):
    jobs = []
    for idx, fasta_file in enumerate(files):
        job = {
            'file_name' : fasta_file,
            'alignment' : get_alignment(fasta_file),
            'id'        : idx }
        jobs.append(job)

    launch_threads(jobs)

def main_maf(files):
    jobs = []
    n    = 0
    for maf_file in files:
        alignment_list = get_alignment(maf_file)
        # maf files usually contain multiple alignment blocks
        for alignment in alignment_list:
            n = n + 1
            job = {
                'file_name' : maf_file,
                'alignment' : alignment,
                'id'        : n }
            jobs.append(job)

    launch_threads(jobs)

# main
# ------------------------------------------------------------------------------

def __main__():
    global options
    try:
        longopts   = ["format=", "threads=", "help", "verbose"]
        opts, tail = getopt.getopt(sys.argv[1:], "t:hv", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    if len(tail) < 2:
        usage()
        return 1
    # override those options with command line arguments
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o == "--format":
            options['format'] = a
        if o in ("-t", "--threads"):
            options['threads'] = int(a)
            if not options['threads'] >= 1:
                usage()
                return 1
    # tail
    options['phylotree'] = pt_root_t(tail[0])
    options['leafmap']   = pt_create_map(options['phylotree'])
    # call main with files as argument
    if options['format'] == 'fasta':
        main_fasta(tail[1:])
    elif options['format'] == 'maf':
        main_maf(tail[1:])
    else:
        usage()
        return 1
    return 0

if __name__ == "__main__":
    try:
        sys.exit(__main__())
    except IOError, e:
        sys.stderr.write('%s\n' % e)
        sys.exit(1)
