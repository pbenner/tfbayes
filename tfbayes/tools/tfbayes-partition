#! /usr/bin/env python

# Copyright (C) 2012 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# imports
# ------------------------------------------------------------------------------

import sys
import getopt
import os
import subprocess

from tfbayes.fasta   import *
from tfbayes.cluster import *
from tfbayes.uipac   import *
from tfbayes.config  import *

def importMatplotlib(backend=None):
    global pyplot
    global NonUniformImage
    global PdfPages
    global patches
    global path
    from matplotlib import use
    if backend:
        use(backend)
    import matplotlib.pyplot   as     pyplot
    from   matplotlib.image    import NonUniformImage
    from   matplotlib.backends.backend_pdf import PdfPages
    import matplotlib.patches  as     patches
    import matplotlib.path     as     path

# global options
# ------------------------------------------------------------------------------

sampler_config = {
    'baseline_priors'  : [],
    'seq_file'         : None,
    'tfbs_length'      : None,
    'save'             : None,
    }

options = {
    'plot'             : False,
    'revcomp'          : False,
    'join'             : False,
    'load'             : None,
    'save'             : None,
    'verbose'          : False,
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-partition [option]... SAMPLER_CONFIG"
    print
    print "This program is used to generate motifs from the MAP partition"
    print "of ChIP data. Motifs can be either plotted or saved as counts."
    print
    print "Options:"
    print "   -j, --join                     - join plots with pdftk"
    print "   -r                             - also plot reverse complements"
    print
    print "   -l, --load=FILE                - load motifs from FILE"
    print "   -s, --save=FILE                - save motifs to FILE"
    print
    print "   -h, --help                     - print help"
    print "   -v, --verbose                  - be verbose"
    print

# plot motifs
# ------------------------------------------------------------------------------

def plot_cluster_list(cluster_list):
    basename = os.path.splitext(os.path.split(sampler_config['save'])[1])[0]
    files    = plot.plot_cluster_list(cluster_list, basename, revcomp=options['revcomp'])
    if options['join']:
        cmd = 'pdftk %s cat output %s_cluster.pdf' % (' '.join(files), basename)
        print cmd
        subprocess.call(cmd, shell=True)
        cmd = 'rm -f %s' % ' '.join(files)
        print cmd
        subprocess.call(cmd, shell=True)

# main
# ------------------------------------------------------------------------------

def main(sampler_config_file):
    results_config = {}
    parse_sampler_config(sampler_config_file, sampler_config)
    # check if all required options are specified
    if not sampler_config['tfbs_length']:
        raise IOError('tfbs length is unknown')
    if not sampler_config['save']:
        raise IOError('no result file specified')
    if not sampler_config['seq_file']:
        raise IOError('no sequences file specified')
    # parse results file
    results_config_file = sampler_config['save']
    parse_results_config(results_config_file, results_config)
    if options['save']:
        config_parser_save = ConfigParser.ConfigParser()
        config_parser_save.read(options['save'])
    if options['load']:
        config_parser_load = ConfigParser.ConfigParser()
        config_parser_load.read(options['load'])
        cluster_list = fileio.load_cluster_list(config_parser_load, sampler_config)
    else:
        # parse sequences fasta file
        descriptions, sequences = parse_sequences(sampler_config['seq_file'])
        cluster_list = generate_cluster_list(sequences, sampler_config, results_config)
    if options['save']:
        fileio.save_cluster_list(config_parser_save, cluster_list)
        configfile = open(options['save'], 'wb')
        config_parser_save.write(configfile)
    else:
        plot_cluster_list(cluster_list)

def __main__():
    global options
    global sampler_config
    try:
        longopts   = ["help", "verbose", "plot", "join", "load=", "save="]
        opts, tail = getopt.getopt(sys.argv[1:], "rjpls:v", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    if len(tail) != 1:
        usage()
        return 1
    # override those options with command line arguments
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o in ("-j", "--join"):
            options['join'] = True
        if o in ("-p", "--plot"):
            options['plot'] = True
        if o == "-r":
            options['revcomp'] = True
        if o in ("-l", "--load"):
            options['load'] = a
        if o in ("-s", "--save"):
            options['save'] = a
    # call main and exit
    main(tail[0])
    return 0

if __name__ == "__main__":
    sys.exit(__main__())
