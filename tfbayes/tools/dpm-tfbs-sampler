#! /usr/bin/env python

# Copyright (C) 2011 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# imports
# ------------------------------------------------------------------------------

import re
import math
import time
import sys
import getopt
import os

import numpy               as np
import numpy.random.mtrand as mt
import numpy.random        as rd

# local imports
# ------------------------------------------------------------------------------

from tfbayes.dpm.dpm_tfbs_interface import *

# global options
# ------------------------------------------------------------------------------

options = {
    'alpha'               : 0.05,
    'discount'            : 0.0,
    'lambda'              : 0.01,
    'construct_graph'     : False,
    'metropolis_optimize' : True,
    'process_prior'       : "pitman-yor process",
    'background_model'    : "independence",
    'background_alpha'    : 0.5,
    'background_context'  : 2,
    'background_weights'  : 'decay',
    'samples'             : (1000,100),
    'population_size'     : 1,
    'tfbs_length'         : 10,
    'save'                : None,
    'input_file'          : None,
    'verbose'             : False,
    'baseline_weights'    : [1.0],
    'baseline_priors'     : [],
    'socket_file'         : ''
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "dpm-tfbs-sampler [option]... CONFIG"
    print
    print "Options:"
    print "       --alpha=ALPHA              - alpha parameter for the dirichlet process"
    print "       --discount=DISCOUNT        - Pitman-Yor discount (0 <= d < 1)"
    print "       --lambda=LAMBDA            - lambda mixture weight"
    print "       --context=CONTEXT          - context of the background model"
    print "       --process-prior=NAME       - possible process priors:"
    print "                                    pitman-yor process (default),"
    print "                                    uniform process, poppe process"
    print "       --background-model=NAME    - possible background models:"
    print "                                    independence (default),"
    print "                                    markov chain mixture,"
    print "                                    parsimonious tree"
    print "       --tfbs-length=LENGTH       - length of the tfbs"
    print
    print "   -s, --save=FILE                - save posterior to FILE"
    print "       --samples=SAMPLES:BURN_IN  - number of samples [default: 1000:100]"
    print "       --population-size=INT      - number of parallel samplers [default: 1]"
    print
    print "   -h, --help                     - print help"
    print "   -v, --verbose                  - be verbose"
    print

# parse config
# ------------------------------------------------------------------------------

def str2bool(v):
    return v.lower() in ("yes", "true", "t", "1")

def read_vector(config_parser, section, option, converter):
    vector_str = config_parser.get(section, option).replace('  ',' ').strip()
    vector     = map(converter, vector_str.split(' '))
    return vector

def read_matrix(config_parser, section, option, converter):
    matrix_str = config_parser.get(section, option)
    matrix     = []
    for line in matrix_str.split('\n'):
        line = line.replace('  ',' ').strip()
        if line != '':
            matrix.append([converter(a) for a in line.split(' ')])
    return matrix

def parse_config(config_file):
    config_parser = ConfigParser.RawConfigParser()
    config_parser.read(config_file)
    if not config_parser.has_section('TFBS-Sampler'):
        raise IOError("Invalid configuration file.")
    options['input_file'] = config_parser.get('TFBS-Sampler', 'sequences')
    if config_parser.has_option('TFBS-Sampler', 'alpha'):
        options['alpha'] = float(config_parser.get('TFBS-Sampler', 'alpha'))
    if config_parser.has_option('TFBS-Sampler', 'discount'):
        options['discount'] = float(config_parser.get('TFBS-Sampler', 'discount'))
    if config_parser.has_option('TFBS-Sampler', 'lambda'):
        options['lambda'] = float(config_parser.get('TFBS-Sampler', 'lambda'))
    if config_parser.has_option('TFBS-Sampler', 'process-prior'):
        options['process_prior'] = config_parser.get('TFBS-Sampler', 'process-prior').strip()
    if config_parser.has_option('TFBS-Sampler', 'background-model'):
        options['background_model'] = config_parser.get('TFBS-Sampler', 'background-model').strip()
    if config_parser.has_option('TFBS-Sampler', 'background-alpha'):
        options['background_alpha'] = float(config_parser.get('TFBS-Sampler', 'background-alpha'))
    if config_parser.has_option('TFBS-Sampler', 'background-context'):
        options['background_context'] = int(config_parser.get('TFBS-Sampler', 'background-context'))
    if config_parser.has_option('TFBS-Sampler', 'background-weights'):
        options['background_weights'] = config_parser.get('TFBS-Sampler', 'background-weights')
    if config_parser.has_option('TFBS-Sampler', 'tfbs-length'):
        options['tfbs_length'] = int(config_parser.get('TFBS-Sampler', 'tfbs-length'))
    if config_parser.has_option('TFBS-Sampler', 'construct-graph'):
        options['construct_graph'] = str2bool(config_parser.get('TFBS-Sampler', 'construct_graph'))
    if config_parser.has_option('TFBS-Sampler', 'metropolis-optimize'):
        options['metropolis_optimize'] = str2bool(config_parser.get('TFBS-Sampler', 'metropolis-optimize'))
    if config_parser.has_option('TFBS-Sampler', 'population-size'):
        options['population_size'] = int(config_parser.get('TFBS-Sampler', 'population-size'))
    if config_parser.has_option('TFBS-Sampler', 'save'):
        options['save'] = config_parser.get('TFBS-Sampler', 'save')
    if config_parser.has_option('TFBS-Sampler', 'samples'):
        options['samples'] = tuple(map(int, config_parser.get('TFBS-Sampler', 'samples').split(":")))
    if config_parser.has_option('TFBS-Sampler', 'baseline-weights'):
        options['baseline_weights'] = read_vector(config_parser, 'TFBS-Sampler', 'baseline-weights', int)
    if config_parser.has_option('TFBS-Sampler', 'baseline-priors'):
        for prior_name in read_vector(config_parser, 'TFBS-Sampler', 'baseline-priors', str):
            prior = read_matrix(config_parser, 'TFBS-Sampler', prior_name, float)
            options['baseline_priors'].append(prior)
    if config_parser.has_option('TFBS-Sampler', 'socket-file'):
        options['socket_file'] = config_parser.get('TFBS-Sampler', 'socket-file').strip()

# sample
# ------------------------------------------------------------------------------

def sample():
    # generate baseline
    if not options['baseline_priors']:
        options['baseline_priors'].append([ [ 1 for j in range(options['tfbs_length']) ] for i in range(4) ])
    if not len(options['baseline_priors']) == len(options['baseline_weights']):
        if options['verbose']:
            print "Setting uniform weights for baseline priors"
        options['baseline_weights'] = [ 1 ] * len(options['baseline_priors'])
    # sample
    samples = options['samples'][0]
    burnin  = options['samples'][1]
    dpm_init(options, options['input_file'])
    dpm_sample(samples, burnin)
    dpm_save(options['save'])

# main
# ------------------------------------------------------------------------------

def main():
    global options
    try:
        longopts   = ["help", "verbose", "alpha=", "lambda=", "discount=",
                      "context", "process-prior=", "backround-model=",
                      "population-size=", "tfbs-length=", "save=", "samples="]
        opts, tail = getopt.getopt(sys.argv[1:], "s:vh", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    if len(tail) != 1:
        usage()
        return 1
    # option default options from config file
    parse_config(*tail)
    # override those options with command line arguments
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o == "--alpha":
            options['alpha'] = float(a)
        if o == "--discount":
            if 0 <= float(a) and float(a) < 1:
                options['discount'] = float(a)
            else:
                usage()
                return 1
        if o == "--lambda":
            options['lambda'] = float(a)
        if o == "--context":
            options['context'] = int(a)
        if o == "--process-prior":
            options['process_prior'] = a
        if o == "--background-model":
            options['background_model'] = a
        if o == "--tfbs-length":
            options['tfbs_length'] = int(a)
        if o == "--population-size":
            options['population_size'] = int(a)
        if o in ("-s", "--save"):
            options['save'] = a
        if o == "--samples":
            options["samples"] = tuple(map(int, a.split(":")))
    sample()
    return 0

if __name__ == "__main__":
    sys.exit(main())
