#! /usr/bin/env python

# Copyright (C) 2011, 2012 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# imports
# ------------------------------------------------------------------------------

import sys
import getopt
import os
import tempfile

# local imports
# ------------------------------------------------------------------------------

from tfbayes.dpm.dpm_tfbs_interface import *
from tfbayes.config                 import *
from tfbayes.cluster                import parse_partition

# global options
# ------------------------------------------------------------------------------

sampler_config = default_sampler_config()

options = {
    'save'                : None,
    'verbose'             : False
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-optimize [option]... SAMPLER_CONFIG"
    print
    print "After running the sampler this program loads the MAP partition and"
    print "locally optimizes the solution, i.e. adjusts cluster positions."
    print
    print "Options:"
    print "   -s, --save=FILE                 - save posterior to FILE"
    print
    print "   -h, --help                      - print help"
    print "   -v, --verbose                   - be verbose"
    print

# optimize
# ------------------------------------------------------------------------------

def optimize():
    # we only need one sampler
    sampler_config['population_size'] = 1
    # parse results config file
    results_config = {}
    parse_results_config(sampler_config['save'], results_config)
    # obtain the partition from the results config
    partition = parse_partition(results_config)
    dpm_init(sampler_config, sampler_config['seq_file'], partition)
    dpm_optimize()
    # save result to a temporary file where it
    # can be parsed
    tmp_results_file = tempfile.NamedTemporaryFile()
    tmp_results_config = {}
    dpm_save(tmp_results_file.name)
    dpm_free()
    parse_results_config(tmp_results_file.name, tmp_results_config)
    # copy the map partition to the old results config
    results_config['map_partition'] = tmp_results_config['map_partition']
    # and save it
    if options['save']:
        save_results_config(options['save'], results_config)
    else:
        save_results_config(sampler_config['save'], results_config)

# main
# ------------------------------------------------------------------------------

def main():
    global options
    global sampler_config
    try:
        longopts   = ["help",
                      "verbose",
                      "save="]
        opts, tail = getopt.getopt(sys.argv[1:], "s:vh", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    if len(tail) != 1:
        usage()
        return 1
    # option default options from config file
    parse_sampler_config(tail[0], sampler_config)
    # override those options with command line arguments
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o in ("-s", "--save"):
            options['save'] = a
    optimize()
    return 0

if __name__ == "__main__":
    sys.exit(main())
