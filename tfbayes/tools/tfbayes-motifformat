#! /usr/bin/env python

# Copyright (C) 2011 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import getopt
import os
import re
import subprocess
import sys

from tfbayes.cluster import plot_motif, plot_counts

# global options
# ------------------------------------------------------------------------------

options = {
    'counts'      : False,
    'prior'       : [0.1, 0.1, 0.1, 0.1, 0.1],
    'join'        : False,
    'revcomp'     : False,
    'verbose'     : False,
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-motifformat [option]... FILE"
    print
    print "The output of `tfbayes-expectation' or `tfbayes-approximation'"
    print "can be parsed with this program and converted to pdf."
    print
    print "Options:"
    print "       --prior=Px:Px:Px:Px:Px     - counts for the prior"
    print "                                    (only used if `-c' is used)"
    print "   -c, --counts                   - visualize counts instead of probabilities"
    print "                                    (output of `tfbayes-approximation')"
    print "   -j, --join                     - join plots with pdftk"
    print
    print "   -h, --help                     - print help"
    print "   -v, --verbose                  - be verbose"
    print

# parse results config
# ------------------------------------------------------------------------------

def parse_file(fin, name, output_file):
    position = fin.tell()
    pattern  = re.compile('^[ \t]*([0-9.]+)[ \t]+([0-9.]+)[ \t]+([0-9.]+)[ \t]+([0-9.]+)[ \t]+([0-9.]+)[ \t]*;?[ \t]*$')
    result    = [[],[],[],[]]
    while True:
        line = fin.readline()
        if not line:
            break
        m = pattern.match(line)
        if m:
            # rescale the expectations since we only use the first four
            tmp = [float(m.group(1)), float(m.group(2)),
                   float(m.group(3)), float(m.group(4))]
            if not options['counts']:
                tmp = map(lambda x: x/sum(tmp), tmp)
            result[0].append(tmp[0])
            result[1].append(tmp[1])
            result[2].append(tmp[2])
            result[3].append(tmp[3])
            position = fin.tell()
        else:
            fin.seek(position)
            break
    if options['counts']:
        plot_counts(result, zip(*([options['prior']]*len(result[0]))), output_file, name)
    else:
        plot_motif(result, output_file, name)

def join_plots(basename, files):
    cmd = 'pdftk %s cat output %s.pdf' % (' '.join(files), basename)
    print cmd
    subprocess.call(cmd, shell=True)
    cmd = 'rm -f %s' % ' '.join(files)
    print cmd
    subprocess.call(cmd, shell=True)

def parse_motifformat(file_name):
    fin = open(file_name,   'r')
    pattern = re.compile('^>(.*)$')
    output_base = os.path.splitext(file_name)[0]
    idx = 0
    files = []
    while True:
        line = fin.readline()
        if not line:
            break
        result = pattern.match(line)
        if result:
            output_file = '%s_%s-%d.pdf' % (output_base, result.group(1), idx)
            parse_file(fin, result.group(1), output_file)
            files.append(output_file)
            idx += 1
        else:
            print "Invalid file format."
            exit(1)
    fin.close()
    if options['join']:
        join_plots(output_base, files)

# main
# ------------------------------------------------------------------------------

def main():
    global options
    try:
        longopts   = ["counts", "join", "prior=", "help", "verbose"]
        opts, tail = getopt.getopt(sys.argv[1:], "cjhv", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o in ("-c", "--counts"):
            options['counts'] = True
        if o in ("-j", "--join"):
            options['join'] = True
        if o == "--prior":
            options['prior'] = map(float, a.split(':'))
            if not len(options['prior']) == 5:
                usage()
                return 1
    if len(tail) == 1:
        parse_motifformat(*tail)
    else:
        usage()
        return 1
    return 0

if __name__ == "__main__":
    try:
        sys.exit(main())
    except IOError, e:
        sys.stderr.write('%s\n' % e)
        sys.exit(1)
