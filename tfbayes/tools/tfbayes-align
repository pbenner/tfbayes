#! /usr/bin/env python

# Copyright (C) 2011-2014 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import getopt
import os
import math
import re
import sys

from tfbayes.config    import *
from tfbayes.cluster   import information
from tfbayes.cluster   import fileio
from tfbayes.cluster   import plot
from tfbayes.cluster   import tools
from tfbayes.cluster   import cluster_t
from tfbayes.interface import sigint

from itertools import izip

# global options
# ------------------------------------------------------------------------------

sampler_config = default_sampler_config()

options = {
    'force'           : False,
    'force-alignment' : None,
    'method'          : 'kl-divergence',
    'bg-freq'         : [0.25] * 4,
    'cut-matrix'      : True,
    'verbose'         : False,
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-align [option]... SAMPLER_CONFIG CLUSTER_FILE CLUSTER_1 CLUSTER_2 NEW_CLUSTER"
    print
    print "After sampling and processing the estimated partition, this program allows"
    print "to align two clusters according to several alternative objectives."
    print
    print "CLUSTER_1 and CLUSTER_2 identify the two clusters that should be aligned."
    print "Use `!\' to specify reverse complements, i.e. \"cluster_6!\"."
    print
    print "Options:"
    print "   -f                             - overwrite existing cluster if necessary"
    print "       --force-alignment=N        - force alignment at position N"
    print "       --method=METHOD            - kl-divergence (default), information-content, or"
    print "                                    r-sequence"
    print "   -n                             - do not cut matrix"
    print
    print "   -h, --help                     - print help"
    print "   -v, --verbose                  - be verbose"
    print

# tools
# ------------------------------------------------------------------------------

def argmax(array):
    result = []
    for i in izip(array, xrange(len(array))):
        if i[0] == max(array):
            result.append(i[1])
    return result

def argmin(array):
    result = []
    for i in izip(array, xrange(len(array))):
        if i[0] == min(array):
            result.append(i[1])
    return result

def sum_counts_mat(i, j, k, c1_counts, c2_counts, length):
    j1 = j
    j2 = j-k
    if   j1 >= 0 and j1 < length and j2 >= 0 and j2 < length:
        return c1_counts[i][j1] + c2_counts[i][j2]
    elif j1 >= 0 and j1 < length:
        return c1_counts[i][j1]
    elif j2 >= 0 and j2 < length:
        return c2_counts[i][j2]
    else:
        return 0

def sum_counts_vec(j, k, c1_counts, c2_counts, length):
    j1 = j
    j2 = j-k
    if   j1 >= 0 and j1 < length and j2 >= 0 and j2 < length:
        return c1_counts[j1] + c2_counts[j2]
    elif j1 >= 0 and j1 < length:
        return c1_counts[j1]
    elif j2 >= 0 and j2 < length:
        return c2_counts[j2]
    else:
        return 0

# alignment
# ------------------------------------------------------------------------------

def cut_cluster(cluster, length):
    while cluster.m > length:
        entropy = cluster.entropy()
        if entropy[0] > entropy[-1]:
            cluster = cluster[1:cluster.m]
        else:
            cluster = cluster[0:cluster.m-1]
    return cluster

def align(k, c1, c2, identifier=None):
    length  = c1.m
    i_range = range(c1.n)
    j_range = range(min(0,k), max(length,length+k))
    sum_counts     = [ [ sum_counts_mat(i, j, k, c1.counts, c2.counts, length) for j in j_range ] for i in i_range ]
    sum_counts_gap = [ sum_counts_vec(j, k, c1.counts_gap, c2.counts_gap, length) for j in j_range ]
    sum_alpha      = [ [ sum_counts_mat(i, j, k, c1.alpha, c2.alpha, length) for j in j_range ] for i in i_range ]
    sum_alpha_gap  = [ sum_counts_vec(j, k, c1.alpha_gap, c2.alpha_gap, length) for j in j_range ]
    sum_components = c1.components + c2.components
    return cluster_t(sum_counts, sum_counts_gap, sum_alpha, sum_alpha_gap, sum_components, identifier, c1.cluster_type)

def max_alignment(c1, c2):
    ic      = []
    length  = c1.m
    k_range = range(-length+1, length)
    for k in k_range:
        if options['method'] == 'information-content':
            result = align(k, c1, c2)
            result = cut_cluster(result, c1.m)
            ic.append(information.information_content(options['bg-freq'], result))
        if options['method'] == 'r-sequence':
            result = align(k, c1, c2)
            result = cut_cluster(result, c1.m)
            ic.append(information.r_sequence(result))
        if options['method'] == 'kl-divergence':
            ic.append(information.kl_divergence(k, options['bg-freq'], c1, c2))
    if options['method'] == 'information-content' or options['method'] == 'r-sequence':
        if options['verbose']:
            print zip(ic, k_range)
            print "max: %i" % k_range[argmax(ic)[0]]
        return k_range[argmax(ic)[0]]
    if options['method'] == 'kl-divergence':
        if options['verbose']:
            print zip(ic, k_range)
            print "min: %i" % k_range[argmin(ic)[0]]
        return k_range[argmin(ic)[0]]

# main
# ------------------------------------------------------------------------------

def main(sampler_config_file, cluster_file, cluster_1_id, cluster_2_id, cluster_out_id):
    if re.match("cluster_[0-9]+!?", cluster_1_id) == None:
        IOError("Invalid cluster name: `{0}\'.".format(cluster_1_id))
    if re.match("cluster_[0-9]+!?", cluster_2_id) == None:
        IOError("Invalid cluster name: `{0}\'.".format(cluster_2_id))
    if re.match("cluster_[0-9]+", cluster_out_id) == None:
        IOError("Invalid cluster name: `{0}\'.".format(cluster_out_id))
    cluster_1_id = re.match("cluster_([0-9]+)(!?)", cluster_1_id).groups()
    cluster_2_id = re.match("cluster_([0-9]+)(!?)", cluster_2_id).groups()
    cluster_out_id = int(re.match("cluster_([0-9]+)", cluster_out_id).groups()[0])
    # parse cluster list
    ############################################################################
    parse_sampler_config(sampler_config_file, sampler_config)
    cluster_list = fileio.load_cluster_list(cluster_file, sampler_config)
    # find the two clusters in the cluster list
    ############################################################################
    cluster_1 = None
    cluster_2 = None
    for cluster in cluster_list:
        if cluster.identifier == int(cluster_1_id[0]):
            if (cluster_1_id[1] == '!'):
                cluster_1 = cluster.revcomp()
            else:
                cluster_1 = cluster
        if cluster.identifier == int(cluster_2_id[0]):
            if (cluster_2_id[1] == '!'):
                cluster_2 = cluster.revcomp()
            else:
                cluster_2 = cluster
        if cluster.identifier == cluster_out_id:
            if options['force']:
                cluster_list.remove(cluster)
            else:
                raise IOError("Output cluster already exists. Use `-f\' to proceed.")
    if cluster_1 == None:
        raise IOError("Cluster {0} not found in configuration file.".format(cluster_1_id[0]))
    if cluster_2 == None:
        raise IOError("Cluster {0} not found in configuration file.".format(cluster_2_id[0]))
    if not cluster_1.m == cluster_2.m:
        raise IOError("The two clusters have different lengths.")
    if not cluster_1.cluster_type == cluster_2.cluster_type:
        raise IOError("The two clusters have different types.")
    # align clusters
    ############################################################################
    if options['force-alignment']:
        m = options['force-alignment']
    else:
        m = max_alignment(cluster_1, cluster_2)
    result = align(m, cluster_1, cluster_2, cluster_out_id)
    result = cut_cluster(result, cluster_1.m)
    cluster_list.append(result)
    # save result
    ############################################################################
    fileio.save_cluster_list(cluster_file, cluster_list)

def __main__():
    global options
    try:
        longopts   = ["help", "verbose", "method=", "force-alignment=", "save-motif=", "save-plot="]
        opts, tail = getopt.getopt(sys.argv[1:], "fvn", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o == "--method":
            if a == "kl-divergence" or a == "information-content" or a == 'r-sequence':
                options['method'] = a
            else:
                usage()
                return 1
        if o == "-f":
            options['force'] = True
        if o == "-n":
            options['cut-matrix'] = False
        if o == "--force-alignment":
            options['force-alignment'] = int(a)
        if o == "--save-motif":
            options['save-motif'] = a
        if o == "--save-plot":
            options['save-plot'] = a
    if len(tail) != 5:
        usage()
        return 1
    main(*tail)

if __name__ == "__main__":
    try:
        sys.exit(__main__())
    except IOError, e:
        sys.stderr.write('%s\n' % e)
        sys.exit(1)
