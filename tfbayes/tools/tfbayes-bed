#! /usr/bin/env python

# Copyright (C) 2012 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# imports
# ------------------------------------------------------------------------------

import getopt
import re
import sys

import Queue
import threading
import thread

from tfbayes                import alignio
from tfbayes.phylotree      import *
from tfbayes.uipac.alphabet import DNA

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-bed [option]... BED_FILE DATABASE_DIRECTORY"
    print
    print "Extract locations given in BED format from a multiple alignment"
    print "database. The database must be in multiple alignment format (MAF)."
    print
    print "Options:"
    print "   -f FORMAT               - format of the output files"
    print "   -r NAME                 - name of the reference species, all"
    print "                             coordinates are based on this genome"
    print
    print "   -h, --help              - print help"
    print "   -v, --verbose           - be verbose"
    print

# options
# ------------------------------------------------------------------------------

options = {
    'database_dir'   : None,
    'output_format'  : 'maf',
    'refseq'         : 'hg19',
    'verbose'        : False,
    }

# database operations
# ------------------------------------------------------------------------------

def get_alignment(chromosome, seq_start, seq_end):
    if options['database_dir']:
        mafindex   = "%s/%s.mafindex" % (options['database_dir'], chromosome)
        maf        = "%s/%s.maf"      % (options['database_dir'], chromosome)
    else:
        mafindex   = "%s.mafindex" % chromosome
        maf        = "%s.maf"      % chromosome
    seqname = "%s.%s" % (options['refseq'], chromosome)

    idx = alignio.MafIO.MafIndex(mafindex, maf, seqname)

    multiple_alignment = idx.get_spliced([seq_start],
                                         [seq_end])

    return multiple_alignment

# parse bed file
# ------------------------------------------------------------------------------

def process_entry(chromosome, seq_start, seq_end, identifier):
    alignment = get_alignment(chromosome, seq_start, seq_end)
    alignio.write(alignment, sys.stdout, options['output_format'])

def parse_bed(bed_file):
    fp = open(bed_file, 'r')
    pattern = re.compile('^(chr[a-zA-Z0-9]+)[ \t]([0-9]+)[ \t]([0-9]+)')
    n = 0

    # parse bed file
    for line in fp:
        m = pattern.match(line)
        if m:
            n = n + 1
            chromosome = m.group(1)
            seq_start  = int(m.group(2))
            seq_end    = int(m.group(3))
            identifier = n
            process_entry(chromosome, seq_start, seq_end, identifier)

    fp.close()

# main
# ------------------------------------------------------------------------------

def __main__():
    global options
    try:
        longopts   = ["help", "verbose"]
        opts, tail = getopt.getopt(sys.argv[1:], "f:r:hv", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    if len(tail) != 2:
        usage()
        return 1
    # override those options with command line arguments
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o == "-f":
            options['output_format'] = a
        if o == "-r":
            options['refseq'] = a
    # tail
    bed_file = tail[0]
    options['database_dir'] = tail[1]
    # parse macs file and exit
    parse_bed(bed_file)
    return 0

if __name__ == "__main__":
    try:
        sys.exit(__main__())
    except IOError, e:
        sys.stderr.write('%s\n' % e)
        sys.exit(1)
