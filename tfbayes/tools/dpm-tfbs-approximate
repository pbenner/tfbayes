#! /usr/bin/env python

# Copyright (C) 2012 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# imports
# ------------------------------------------------------------------------------

import getopt
import re
import sys

import Queue
import threading
import thread

from Bio                    import AlignIO

from tfbayes.phylotree      import *
from tfbayes.uipac.alphabet import DNA

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "dpm-tfbs-approximate [option]... PHYLOGENETIC_TREE FASTA_FILE..."
    print
    print "Given a set of fasta files from the ChIP experiment, this"
    print "program computes an approximation of the phylogenetic tree"
    print "for each column of the multiple alignment. The result is"
    print "used as input for the sampler."
    print
    print "Options:"
    print "   -t, --threads=N                    - run N jobs in parallel"
    print
    print "   -h, --help                         - print help"
    print "   -v, --verbose                      - be verbose"
    print

# options
# ------------------------------------------------------------------------------

options = {
    'phylotree'      : None,
    'leafmap'        : None,
    'threads'        : 1,
    'verbose'        : False,
    }

# some tools
# ------------------------------------------------------------------------------

def print_result(container):
    print '>%s' % container['file_name']
    for result in container['result']:
        for i in range(4):
            print '%11.8f' % result[i],
        print ";"

def reweight(expectation):
    return [ expectation[i]/(1.0-expectation[4]) for i in range(4) ]

def code_nucleotide(char):
    if char == 'N' or char == 'n' or char == "-":
        return 4.0
    else:
        return float(DNA.code(char))

# main logic comes here
# ------------------------------------------------------------------------------

def alignment_approximate(multiple_alignment, phylotree):
    """For every column in the alignment, approximate the likelihood
    given by the phylogenetic tree by a simple multinomial
    distribution with averaged count statistics."""
    leafmap   = options['leafmap']
    num_leafs = pt_num_leafs(phylotree)

    observations = [ 4.0 ]*num_leafs

    result = []
    for i in range(len(multiple_alignment[0])):
        # fill observations array
        for alignment in multiple_alignment:
            name = alignment.name.split(".")[0]
            if leafmap.has_key(name):
                observations[leafmap[name]] = code_nucleotide(alignment.seq[i])
        # call phylotree library
        result.append(pt_approximate(phylotree, observations))
    return result

# parse fasta file
# ------------------------------------------------------------------------------

def get_alignment(file_name):
    # use biopython to parse the fasta file
    return AlignIO.read(file_name, "fasta")

# threading
# ------------------------------------------------------------------------------

class ComputationThread(threading.Thread):
    def __init__(self, queue_in, queue_out, mutex):
        threading.Thread.__init__(self)
        self.queue_in  = queue_in
        self.queue_out = queue_out
        self.mutex     = mutex
        self.phylotree = pt_clone(options['phylotree'])
    def __del__(self):
        pt_destroy(self.phylotree)
    def run(self):
        while True:
            job = self.queue_in.get()
            if options['verbose']:
                # to print a message we need to acquire the mutex
                # to messages to not appear scrambled
                self.mutex.acquire()
                print >> sys.stderr, 'Processing %s.' % job['file_name']
                self.mutex.release()
            # obtain the alignment by parsing the fasta file
            alignment = get_alignment(job['file_name'])
            # turn the alignment into an approximation
            result    = alignment_approximate(alignment, self.phylotree)
            if result:
                container = {
                    'result'       : result,
                    'file_name'    : job['file_name'],
                    'id'           : job['id'] }
                self.queue_out.put((job['id'], container))
            self.queue_in.task_done()

def launch_threads(jobs):
    mutex     = thread.allocate_lock()
    queue_in  = Queue.Queue()
    queue_out = Queue.PriorityQueue()
    threads   = []
    # launch daemon threads
    if not threads:
        for i in range(options['threads']):
            t = ComputationThread(queue_in, queue_out, mutex)
            t.setDaemon(True)
            t.start()
            threads += [t]
    # fill input queue
    for job in jobs:
        queue_in.put(job)
    queue_in.join()
    # process output
    while not queue_out.empty():
        container = queue_out.get()[1]
        print_result(container)

# go through the list of fasta files and package them nicely as jobs
# ------------------------------------------------------------------------------

def __main__(fasta_files):
    jobs = []
    n    = 0
    for fasta_file in fasta_files:
        n = n + 1
        job = {
            'file_name' : fasta_file,
            'id'        : n }
        jobs.append(job)

    launch_threads(jobs)

# main
# ------------------------------------------------------------------------------

def main():
    global options
    try:
        longopts   = ["threads=", "help", "verbose"]
        opts, tail = getopt.getopt(sys.argv[1:], "t:hv", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    if len(tail) < 2:
        usage()
        return 1
    # override those options with command line arguments
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o in ("-t", "--threads"):
            options['threads'] = int(a)
            if not options['threads'] >= 1:
                usage()
                return 1
    # tail
    options['phylotree'] = pt_parse_file(tail[0])
    options['leafmap']   = pt_create_map(options['phylotree'])
    # call main with fasta files as argument
    __main__(tail[1:])
    return 0

if __name__ == "__main__":
    sys.exit(main())
