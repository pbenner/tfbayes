#! /usr/bin/env python

# Copyright (C) 2011 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import ConfigParser
import getopt
import os
import math
import sys

from Bio                    import AlignIO

from tfbayes.fasta          import *
from tfbayes.cluster        import *
from tfbayes.uipac.alphabet import DNA

# global options
# ------------------------------------------------------------------------------

sampler_config = {
    }

options = {
    'load'           : None,
    'revcomp'        : False,
    'verbose'        : False,
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-export-cluster [option]... SAMPLER_CONFIG CLUSTER_NUMBER"
    print
    print "Given a sampling result, export one of the clusters as a pwm. The"
    print "output of this program can be used with `tfbayes-scal' to search"
    print "alignments of sequences for matches."
    print
    print "Options:"
    print "   -r                             - export reverse complement"
    print
    print "   -h, --help                     - print help"
    print "   -v, --verbose                  - be verbose"
    print

# print cluster
# ------------------------------------------------------------------------------

def print_vector(vector):
    for scalar in vector:
        print '%5.2f ' % scalar,
    print

def print_matrix(matrix):
    for idx, vector in enumerate(matrix):
        print '%s: ' % DNA.decode(idx),
        print_vector(vector)

# export cluster
# ------------------------------------------------------------------------------

def export_cluster(cluster):
    if options['revcomp']:
        print_matrix(cluster.revcomp().pwm())
    else:
        print_matrix(cluster.pwm())

# search the cluster list
# ------------------------------------------------------------------------------

def find_cluster(cluster_list, cluster_number):
    for cluster in cluster_list:
        if cluster.identifier == cluster_number:
            return cluster
    raise ValueError("Cluster not found.")

# main
# ------------------------------------------------------------------------------

def main(sampler_config_file, cluster_number):
    results_config = {}
    parse_sampler_config(sampler_config_file, sampler_config)
    # parse results file
    results_config_file = sampler_config['save']
    parse_results_config(results_config_file, results_config)
    if options['load']:
        config_parser_load = ConfigParser.ConfigParser()
        config_parser_load.read(options['load'])
        cluster_list = fileio.load_cluster_list(config_parser_load, sampler_config)
    else:
        # parse sequences fasta file
        descriptions, sequences = parse_sequences(sampler_config['seq_file'])
        cluster_list = generate_cluster_list(sequences, sampler_config, results_config)
    cluster = find_cluster(cluster_list, cluster_number)
    export_cluster(cluster)

# __main__
# ------------------------------------------------------------------------------

def __main__():
    global options
    try:
        longopts   = ["help", "verbose"]
        opts, tail = getopt.getopt(sys.argv[1:], "r", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o == "-r":
            options['revcomp'] = True
    if not len(tail) is 2:
        usage()
        return 1
    # call main
    sampler_config_file = tail[0]
    cluster_number      = tail[1]
    main(sampler_config_file, int(cluster_number))

if __name__ == "__main__":
    sys.exit(__main__())
