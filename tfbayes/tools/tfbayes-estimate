#! /usr/bin/env python

# Copyright (C) 2011-2013 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# imports
# ------------------------------------------------------------------------------

import sys
import getopt
import os

# local imports
# ------------------------------------------------------------------------------

from tfbayes.config                 import *
from tfbayes.dpm.dpm_tfbs_interface import *
from tfbayes.interface              import sigint

# global options
# ------------------------------------------------------------------------------

sampler_config = default_sampler_config()

options = {
    'optimize'            : False,
    'take'                : -1,
    'verbose'             : False
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-estimate [option]... COMMAND SAMPLER_CONFIG"
    print
    print "This program computes a point estimate (e.g. mean or median)"
    print "from a set of posterior samples."
    print
    print "Afterwards, the program `tfbayes-partition' can be used to process"
    print "(i.e. plot or export) the resulting partition of the data set."
    print
    print "Commands:"
    print "       map                         - compute map partition"
    print "       mean                        - compute mean partition"
    print "       median                      - compute median parititon"
    print
    print "Options:"
    print "   -o                              - optimize map partition"
    print "       --take=N                    - take last N partitions to compute"
    print "                                     the mean or median"
    print
    print "   -h, --help                      - print help"
    print "   -v, --verbose                   - be verbose"
    print

# sample
# ------------------------------------------------------------------------------

def compute_mean(command):
    # get posterior samples from results config
    results_config = default_results_config()
    parse_results_config(sampler_config.save, results_config)
    # inititialize data
    data_tfbs = data_tfbs_t(sampler_config.phylogenetic_file, sampler_config.tfbs_length)
    # initialize dpm
    dpm_tfbs  =  dpm_tfbs_t(sampler_config, data_tfbs)
    # compute mean or median
    if command == "map":
        results_config['map_partition'] = dpm_tfbs.map(results_config['sampling_history'], options['optimize'], options['verbose'])
    elif command == "mean":
        results_config['mean_partition'] = dpm_tfbs.mean(results_config['sampling_history'], options['take'], options['verbose'])
    elif command == "median":
        results_config['median_partition'] = dpm_tfbs.median(results_config['sampling_history'], options['take'], options['verbose'])
    else:
        usage()
        return 1
    # save result
    save_results_config(sampler_config.save, results_config)

# main
# ------------------------------------------------------------------------------

def __main__():
    global options
    global sampler_config
    try:
        longopts   = ["take=",
                      "help",
                      "verbose"]
        opts, tail = getopt.getopt(sys.argv[1:], "ovh", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    if len(tail) != 2:
        usage()
        return 1
    # option default options from config file
    parse_sampler_config(tail[1], sampler_config)
    # override those options with command line arguments
    for o, a in opts:
        if o == "-o":
            options['optimize'] = True
        if o == "--take":
            options["take"] = int(a)
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
    compute_mean(tail[0])
    return 0

if __name__ == "__main__":
    try:
        sys.exit(__main__())
    except IOError, e:
        sys.stderr.write('%s\n' % e)
        sys.exit(1)
