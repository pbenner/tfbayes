#! /usr/bin/env python

# Copyright (C) 2011 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# imports
# ------------------------------------------------------------------------------

import re
import math
import time
import ConfigParser
import sys
import getopt
import os

import numpy               as     np
import numpy.random.mtrand as     mt
import numpy.random        as     rd

from tfbayes.fasta  import *
from tfbayes.config import *

def importMatplotlib(backend=None):
    global pyplot
    global NonUniformImage
    global PdfPages
    global patches
    global path
    from matplotlib import use
    if backend:
        use(backend)
    import matplotlib.pyplot   as     pyplot
    from   matplotlib.image    import NonUniformImage
    from   matplotlib.backends.backend_pdf import PdfPages
    import matplotlib.patches  as     patches
    import matplotlib.path     as     path

# global options
# ------------------------------------------------------------------------------

options = {
    'save'        : None,
    'sequences'   : None,
    'interactive' : False,
    'verbose'     : False,
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "tfbayes-plot [option]... SAMPLER_CONFIG"
    print
    print "This program plots the log posterior and number of clusters of"
    print "a sampling run."
    print
    print "Options:"
    print "   -s, --save=FILE                - save plot to FILE"
    print
    print "   -h, --help                     - print help"
    print "   -v, --verbose                  - be verbose"
    print

# plot
# ------------------------------------------------------------------------------

def plot_posterior_and_components(results_config, show):
    fig = pyplot.figure()
    fig.subplots_adjust(left=0.15)
    ax1 = fig.add_subplot(2,1,1)
    ax2 = fig.add_subplot(2,1,2)
    ax1.set_xlabel("sample")
    ax1.set_ylabel("log posterior")
    ax2.set_ylabel("components")
    for l in results_config['posterior']:
        p1 = ax1.plot(l)
    for c in results_config['components']:
        p2 = ax2.plot(c)
    show()

def plot_result(results_config):
    if options['save']:
        importMatplotlib('Agg')
        pp    = PdfPages(options['save'])
        show  = pp.savefig
        close = pp.close
    else:
        importMatplotlib()
        show  = pyplot.show
        close = None
    plot_posterior_and_components(results_config, show)
    if close:
        close()

# main
# ------------------------------------------------------------------------------

def main(sampler_config_file):
    sampler_config = {}
    results_config = {}
    parse_sampler_config(sampler_config_file, sampler_config)
    results_config_file = sampler_config['save']
    parse_results_config(results_config_file, results_config)
    plot_result(results_config)

# __main__
# ------------------------------------------------------------------------------

def __main__():
    global options
    try:
        longopts   = ["help", "verbose", "save="]
        opts, tail = getopt.getopt(sys.argv[1:], "", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o in ("-s", "--save"):
            options['save'] = a
    if not len(tail) == 1:
        usage()
        return 1
    main(*tail)
    return 0

if __name__ == "__main__":
    try:
        sys.exit(__main__())
    except IOError, e:
        sys.stderr.write('%s\n' % e)
        sys.exit(1)
