#! /usr/bin/env python

# Copyright (C) 2011 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import ConfigParser
import getopt
import os
import math
import sys

from tfbayes.fasta import fasta
from tfbayes.motif import tools
from tfbayes.uipac.alphabet import DNA

# global options
# ------------------------------------------------------------------------------

options = {
    'revcomp'        : False,
    'cluster-name'   : None,
    'threshold'      : 20.0,
    'verbose'        : False,
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "dpm-tfbs-scan [option]... CLUSTER_CONFIG CLUSTER_NAME SEQUENCES_FASTA..."
    print
    print "Options:"
    print "   -r                             - scan for the reverse complement"
    print "       --save=CLUSTER_NAME        - save motif of matched sequences"
    print "       --threshold=VALUE"
    print
    print "   -h, --help                     - print help"
    print "   -v, --verbose                  - be verbose"
    print

# scan sequences file
# ------------------------------------------------------------------------------

def add_subsequence(counts, sub_sequence):
    for i in range(len(counts[0])):
        if DNA.is_nucleotide(sub_sequence[i]):
            counts[DNA.code(sub_sequence[i])][i] += 1

def scan(pwm, sequences_file):
    if options['revcomp']:
        pwm = tools.reverse_complement(pwm)
    parser = fasta.parser(sequences_file)
    length = len(pwm[0])
    counts = [ [ 1 for i in range(length) ] for j in range(len(pwm)) ]
    hits = 0
    while 1:
        description, sequence = parser.read_sequence()
        if not sequence:
            break
        for j in range(0, len(sequence)-length):
            sub_sequence = sequence[j:j+length]
            score = tools.compute_score(pwm, sub_sequence)
            if score > options['threshold']:
                add_subsequence(counts, sub_sequence)
                hits += 1
                if len(description) >= 3:
                    print "(%15s,%12s,%05i,%3.5f): %s" % (description[0], description[2], j, score, sub_sequence)
                else:
                    print "(%30s,%05i,%3.5f): %s" % (description[0], j, score, sub_sequence)
    print "Found %d sequences." % hits
    return tools.compute_frequencies(counts), hits+1

# parse results config
# ------------------------------------------------------------------------------

def save_motif(config_parser, config_file, motif, components):
    config_parser.set('Cluster', 'cluster', '%s %s' % (config_parser.get('Cluster', 'cluster'), options['cluster-name']))
    config_parser.set('Cluster', options['cluster-name'], "\n"+"\n".join(map(lambda arg: " ".join(map(str, arg)), motif)))
    config_parser.set('Cluster', '%s_components' % options['cluster-name'], str(components))
    fp = open(config_file, 'wb')
    config_parser.write(fp)
    fp.close()

def read_config(config_file, cluster_name, sequences_files):
    config_parser = ConfigParser.RawConfigParser()
    config_parser.read(config_file)
    if not config_parser.has_section('Cluster'):
        raise IOError("Invalid configuration file.")
    pwm = tools.compute_pwm(config_parser, cluster_name)
    for sequences_file in sequences_files:
        motif, components = scan(pwm, sequences_file)
    if options['cluster-name']:
        save_motif(config_parser, config_file, motif, components)

# main
# ------------------------------------------------------------------------------

def main():
    global options
    try:
        longopts   = ["help", "verbose", "threshold=", "save="]
        opts, tail = getopt.getopt(sys.argv[1:], "r", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    for o, a in opts:
        if o == "--save":
            options['cluster-name'] = a
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o == "--threshold":
            options['threshold'] = float(a)
        if o == "-r":
            options['revcomp'] = True
    if len(tail) < 3:
        usage()
        return 1
    read_config(tail[0], tail[1], tail[2:])

if __name__ == "__main__":
    sys.exit(main())
