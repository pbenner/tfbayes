#! /usr/bin/env python

# Copyright (C) 2011 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# imports
# ------------------------------------------------------------------------------

import re
import math
import time
import ConfigParser
import sys
import getopt
import os

import networkx as nx
try:
    from networkx import graphviz_layout
except ImportError:
    raise ImportError("This example needs Graphviz and either PyGraphviz or Pydot")

import numpy               as     np
import numpy.random.mtrand as     mt
import numpy.random        as     rd

from tfbayes.fasta import fasta
from tfbayes.motif import fileio
from tfbayes.motif import information
from tfbayes.motif import tools
from tfbayes.motif import plot

from tfbayes.uipac.alphabet import DNA

def importMatplotlib(backend=None):
    global pyplot
    global NonUniformImage
    global PdfPages
    global patches
    global path
    from matplotlib import use
    if backend:
        use(backend)
    import matplotlib.pyplot   as     pyplot
    from   matplotlib.image    import NonUniformImage
    from   matplotlib.backends.backend_pdf import PdfPages
    import matplotlib.patches  as     patches
    import matplotlib.path     as     path

# global options
# ------------------------------------------------------------------------------

options = {
    'threshold'   : 0.005,
    'with-prior'  : True,
    'plot'        : False,
    'load'        : None,
    'save'        : None,
    'interactive' : False,
    'verbose'     : False,
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "dpm-tfbs-graph [option]... RESULTS_CONFIG SEQUENCES_FASTA MOTIF_LENGTH"
    print
    print "Options:"
    print "   -p, --plot                     - plot motifs"
    print "       --with-prior=Yes|No        - generate motif with uniform prior (default: yes)"
    print "   -l, --load=FILE                - load motifs from FILE"
    print "   -s, --save=FILE                - save motifs to FILE"
    print "       --threshold=DOUBLE         - cut edges that are below threshold"
    print
    print "   -h, --help                     - print help"
    print "   -v, --verbose                  - be verbose"
    print

# parse results config
# ------------------------------------------------------------------------------

def read_vector(config, section, option, converter):
    vector_str = config.get(section, option)
    vector     = map(converter, vector_str.split(' '))
    return vector

def read_matrix(config, section, option, converter):
    matrix_str = config.get(section, option)
    matrix     = []
    for line in matrix_str.split('\n'):
        if line != '':
            matrix.append([converter(a) for a in line.split(' ')])
    return matrix

def parse_config(config_parser):
    edges = map(lambda s: s.strip(), read_vector(config_parser, 'Result', 'graph', str))

    return edges

# parse sequences file
# ------------------------------------------------------------------------------

def makefilter(keep):
    """ Return a functor that takes a string and returns a copy of that
        string consisting of only the characters in 'keep'.
    """
    import string

    # make a string of all chars, and one of all those NOT in 'keep'
    allchars = string.maketrans('', '')
    delchars = ''.join([c for c in allchars if c not in keep])

    # return the functor
    return lambda s,a=allchars,d=delchars: s.translate(a, d)

def read_sequences(seq_file):
    parser = fasta.parser(seq_file)
    seqfilter = makefilter('ACGTacgtN')
    descriptions = []
    sequences    = []
    while 1:
        description, line = parser.read_sequence()
        if not line:
            break
        descriptions.append(description[0])
        sequences.append(seqfilter(line))
    return descriptions, sequences

# generate motifs
# ------------------------------------------------------------------------------

def generate_motif(sequences, Gi, motif_length):
    sum_degrees  = sum([ Gi.degree(v, weighted=True) for v in Gi ])
    motif = [ [ 0.0 for j in range(0, motif_length) ] for i in range(0, 4) ]
    mixture_weights = [ float(Gi.degree(v, weighted=True))/sum_degrees for v in Gi ]
    for node, weight in zip(Gi.nodes(), mixture_weights):
        s = int(node.split(':')[0][1:])
        p = int(node.split(':')[1][:-1])
        for j in range(0, motif_length):
            if sequences[s][p+j] == 'A' or sequences[s][p+j] == 'a':
                code = DNA.code('A')
                motif[code][j] += weight
            if sequences[s][p+j] == 'C' or sequences[s][p+j] == 'c':
                code = DNA.code('C')
                motif[code][j] += weight
            if sequences[s][p+j] == 'G' or sequences[s][p+j] == 'g':
                code = DNA.code('G')
                motif[code][j] += weight
            if sequences[s][p+j] == 'T' or sequences[s][p+j] == 't':
                code = DNA.code('T')
                motif[code][j] += weight
    if options['with-prior']:
        components = len(Gi)+1
        motif = [ [ 0.25/components + float(components-1)/components*motif[i][j] for j in range(0, motif_length) ] for i in range(0, 4) ]
    else:
        components = len(Gi)
    return motif, components

def generate_motifs(sequences, G, motif_length):
    Gcc = nx.connected_component_subgraphs(G)
    motifs = []
    motif_counts = []
    components = []
    for n, Gi in zip(range(0, len(Gcc)), Gcc):
        motif, comp = generate_motif(sequences, Gi, motif_length)
        motifs.append(motif)
        components.append(comp)
    return motifs, components

# graph construction
# ------------------------------------------------------------------------------

def construct_graph(edges):
    G = nx.Graph()
    for edge in edges:
        e, w = edge.split('=')
        a, b = e.split('-')
        if float(w) > options['threshold']:
            G.add_edge(a, b, weight=float(w))
    return G

# plot
# ------------------------------------------------------------------------------

font = {'color'      : 'k',
        'fontweight' : 'bold',
        'fontsize'   : 14}

def plot_graph(G):
#    pos = nx.graphviz_layout(G, prog='twopi', args='')
#    pos = nx.graphviz_layout(G, prog='dot', args='')
#    pos = nx.graphviz_layout(G, prog='neato', args='')
    pos = nx.graphviz_layout(G, prog='circo', args='')
#    pos = nx.graphviz_layout(G, prog='nop', args='')
#    pos = nx.spring_layout(G)

    # create figure
    fig = pyplot.figure()
    ax  = fig.add_subplot(1,1,1)

    # compute edge and node sizes
    edgewidth  = [ d['weight'] for (u, v, d) in G.edges(data = True) ]
    max_weight = max(edgewidth)
    edgewidth  = [ 10.0*weight/max_weight for weight in edgewidth ]
    node_size  = [G.degree(v, weighted=True) for v in G]
    max_size   = max(node_size)
    node_size  = [ 500.0*size/max_size for size in node_size]

    # plot cluster labels
    Gcc = nx.connected_component_subgraphs(G)
    for n, Gi in zip(range(0, len(Gcc)), Gcc):
        center = map(lambda x: sum(x)/float(len(x)), zip(*[ pos[node] for node in Gi ]))
        ax.text(center[0], center[1]+10, 'Cluster %d' % n, font, alpha=0.2, ha='center', va='top')

    # plot graph
    nx.draw(G, pos, node_size=node_size, alpha=0.6, cmap=pyplot.cm.Reds_r, ax=ax)
    nx.draw_networkx_edges(G, pos, width=edgewidth, edge_color='r', alpha=0.2, ax=ax)

    pyplot.show()

def plot_result(G):
    if options['save']:
        importMatplotlib('Agg')
    else:
        importMatplotlib()
    plot_graph(G)

# main
# ------------------------------------------------------------------------------

def __main__(results_file, seq_file, motif_length):
    config_parser_results = ConfigParser.ConfigParser()
    config_parser_results.read(results_file)
    edges = parse_config(config_parser_results)
    descriptions, sequences = read_sequences(seq_file)
    G = construct_graph(edges)
    if options['plot'] or options['save']:
        if options['save']:
            config_parser_save = ConfigParser.ConfigParser()
            config_parser_save.read(options['save'])
        if options['load']:
            config_parser_load = ConfigParser.ConfigParser()
            config_parser_load.read(options['load'])
            bg, motifs, components = fileio.load_motifs(config_parser_load)
        else:
            bg_counts = read_matrix(config_parser_results, 'Result', 'cluster_bg', int)
            bg = tools.compute_frequencies(bg_counts)
            motifs, components = generate_motifs(sequences, G, int(motif_length))
        if options['plot']:
            plot.plot_motifs(motifs, components, os.path.splitext(os.path.split(results_file)[1])[0])
        if options['save']:
            fileio.save_motifs(config_parser_save, bg, motifs, components)
            configfile = open(options['save'], 'wb')
            config_parser_save.write(configfile)
    else:
        plot_result(G)

def main():
    global options
    try:
        longopts   = ["help", "verbose", "plot", "with-prior=", "load=", "save=", "threshold="]
        opts, tail = getopt.getopt(sys.argv[1:], "pls:v", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o == "--with-prior":
            if a == "Yes" or a == "yes":
                options['with-prior'] = True
            if a == "No" or a == "no":
                print "Neglecting uniform prior!"
                options['with-prior'] = False
        if o in ("-p", "--plot"):
            options['plot'] = True
        if o in ("-l", "--load"):
            options['load'] = a
        if o in ("-s", "--save"):
            options['save'] = a
        if o == "--threshold":
            options['threshold'] = float(a)
    if len(tail) != 3:
        usage()
        return 1
    __main__(*tail)
    return 0

if __name__ == "__main__":
    sys.exit(main())
