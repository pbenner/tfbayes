#! /usr/bin/env python

# Copyright (C) 2011 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import ConfigParser
import getopt
import math
import os
import sys
import Bio.Motif as Motif

from tfbayes.motif import fileio
from tfbayes.motif import information
from tfbayes.motif import tools
from tfbayes.motif import plot

# global options
# ------------------------------------------------------------------------------

options = {
    'revcomp'     : False,
    'verbose'     : False,
    }

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print
    print "dpm-tfbs-weblogo [option]... CLUSTER_CONFIG"
    print
    print "Options:"
    print "   -r                             - plot reverse complements"
    print
    print "   -h, --help                     - print help"
    print "   -v, --verbose                  - be verbose"
    print

# parse results config
# ------------------------------------------------------------------------------

def read_config(config_file):
    config_parser = ConfigParser.RawConfigParser()
    config_parser.read(config_file)
    bg, motifs, components = fileio.load_motifs(config_parser)
    plot.plot_motifs(motifs, components, os.path.splitext(os.path.split(config_file)[1])[0], revcomp=options['revcomp'])

# main
# ------------------------------------------------------------------------------

def main():
    global options
    try:
        longopts   = ["help", "verbose"]
        opts, tail = getopt.getopt(sys.argv[1:], "r", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    for o, a in opts:
        if o in ("-v", "--verbose"):
            sys.stderr.write("Verbose mode turned on.\n")
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0
        if o == "-r":
            options['revcomp'] = True
    if len(tail) == 1:
        read_config(tail[0])
    else:
        usage()
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main())
