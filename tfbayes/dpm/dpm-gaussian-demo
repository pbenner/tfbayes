#! /usr/bin/env python

# Copyright (C) 2011-2013 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# imports
################################################################################

import math
import time
import gobject
import gtk

import numpy               as     np
import numpy.random.mtrand as     mt
import numpy.random        as     rd

from   matplotlib          import *
use('GTKAgg')

from   matplotlib.pyplot   import *
from   matplotlib.image    import NonUniformImage
import matplotlib.patches  as     patches
import matplotlib.path     as     path

from tfbayes.interface import *
from tfbayes.dpm       import *

# utility
################################################################################

def binormal_density(mu, cov):
    return (lambda X, Y: mlab.bivariate_normal(X, Y, np.sqrt(cov[0,0]), np.sqrt(cov[1,1]), mu[0], mu[1], cov[0,1]))

def plot_grid(ax):
    dx  = (ax.get_xlim()[1] - ax.get_xlim()[0])/200.0
    dy  = (ax.get_ylim()[1] - ax.get_ylim()[0])/200.0
    x = np.arange(ax.get_xlim()[0], ax.get_xlim()[1], dx)
    y = np.arange(ax.get_ylim()[0], ax.get_ylim()[1], dy)
    X, Y = np.meshgrid(x, y)
    return x, y, X, Y

# gaussian dpm
################################################################################

class interactive_sampler_t():
    def __init__(self, n, alpha, cov, cov_0, mu_0, pi, ax):
        # initialize local data
        # ----------------------------------------------------------------------
        self.cov     = cov
        self.cov_0   = cov_0
        self.mu_0    = mu_0
        self.pi      = pi
        self.cluster_colors = [ tuple(rd.rand(3)) for i in range(0, n*len(pi)) ]
        self.steps   = 0
        self.data    = data_gaussian_t(n, cov, pi)
        self.sampler = dpm_gaussian_sampler_t(
            dpm_gaussian_t(alpha, cov, cov_0, mu_0, self.data), self.data)
        self.dpm     = self.sampler.dpm()
        # initialize plot
        # ----------------------------------------------------------------------
        self.plot_result(ax)
        mu  = np.array(self.dpm.means())
        x, y, X, Y = plot_grid(ax)
        weights = self.weights()
        self.Z = weights[0]*binormal_density(mu[0], self.cov)(X, Y)
        for w, m in zip(weights[1:], mu[1:]):
            self.Z = (self.Z + w*binormal_density(m, self.cov)(X,Y))
        manager = get_current_fig_manager()
        def updatefig(*args):
            try:
                ax.cla()
                self.run(ax)
                self.plot_result(ax)
                self.plot_joint(ax)
                manager.canvas.draw()
                return True
            except StopIteration:
                return False
        gobject.idle_add(updatefig)
    def run(self, ax):
        self.sample(1, 0)
        x, y, X, Y = plot_grid(ax)
        mu = np.array(self.dpm.means())
        weights = self.weights()
        for w, m in zip(weights, mu):
            self.Z = (self.Z + w*binormal_density(m, self.cov)(X,Y))
        self.Z*=float(self.steps-1)/float(self.steps)
    def weights(self):
        num_clusters = self.dpm.num_clusters()
        w = np.zeros(num_clusters)
        for i, c in zip(range(0, num_clusters), self.dpm.partition()):
            w[i] = float(len(c))
        return w/sum(w)
    def data_points(self):
        return [ list(self.data[index_t(i)]) for i in range(len(self.data)) ]
    def sample(self, n, burnin):
        self.sampler(n, burnin)
        self.steps += 1
    def plot_data(self, ax):
        """ Plot data generated from a mixture of Gaussians. """
        ax.set_axis_off()
        ax.set_xlim([-1,1])
        ax.set_ylim([-1,1])
        # samples
        data = self.data_points()
        tags = self.data.initial_cluster_assignments()
        for (x_, y_), c_ in zip(data, tags):
            ax.scatter(x_, y_, c=self.cluster_colors[int(c_)], alpha=0.75)
        # means
        initial_means = self.data.initial_means()
        mu  = np.array(initial_means)
        ax.scatter(*zip(*mu), c='red', s=50, marker='^')
        # density
        x, y, X, Y = plot_grid(ax)
        Z = self.pi[0]*binormal_density(initial_means[0], self.cov)(X, Y)
        for pi, m in zip(self.pi[1:], initial_means[1:]):
            Z = Z + pi*binormal_density(m, self.cov)(X, Y)
        im = NonUniformImage(ax, interpolation='bilinear', cmap=cm.gray)
        im.set_data(x, y, Z)
        ax.images.append(im)
    def plot_result(self, ax):
        """ Plot clustering result. """
        ax.set_axis_off()
        ax.set_xlim([-1,1])
        ax.set_ylim([-1,1])
        num_clusters = self.dpm.num_clusters()
        # samples
        for c, subset in enumerate(self.dpm.partition()):
            x, y = zip(*[ self.data[index] for index in subset ])
            ax.scatter(x, y, c=self.cluster_colors[c], alpha=0.75)
            ax.set_title("Clustering Result K="+str(num_clusters)+", N="+str(self.steps))
        # means
        mu  = np.array(self.dpm.means())
        ax.scatter(*zip(*mu), c='red', s=50, marker='^')
    def plot_joint(self, ax):
        x, y, X, Y = plot_grid(ax)
        im = NonUniformImage(ax, interpolation='bilinear', cmap=cm.gray)
        im.set_data(x, y, self.Z)
        ax.images.append(im)

def main():
    alpha = 1
    # parameters for the likelihood
    cov   = np.array([[0.01,0.005],[0.005,0.01]])
    # parameters for the prior
    mu_0  = np.array( [0.0,0.0])
    cov_0 = np.array([[10.0,0.1],[0.1,10.0]])
    # parameters for drawing the data
    n     = 300
    pi    = mt.dirichlet([10, 3, 5, 7, 8, 3, 4, 4, 4, 19, 3])

    fig1  = figure()
    ax1   = fig1.add_subplot(2,1,1, title="Data")
    ax2   = fig1.add_subplot(2,1,2)

    sampler = interactive_sampler_t(n, alpha, cov, cov_0, mu_0, pi, ax2)
    sampler.plot_data(ax1)
    sampler.plot_result(ax2)
    show()

if __name__ == "__main__":
    sys.exit(main())
